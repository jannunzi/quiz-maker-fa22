[{"/Users/jannunzi/webdev/quiz-maker/src/index.js":"1","/Users/jannunzi/webdev/quiz-maker/src/reportWebVitals.js":"2","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/counter-react-state.js":"3","/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-redux.js":"4","/Users/jannunzi/webdev/quiz-maker/src/App.js":"5","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/counter-display.js":"6","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/up-component.js":"7","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/down-component.js":"8","/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-up.js":"9","/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-down.js":"10","/Users/jannunzi/webdev/quiz-maker/src/db-design/db-design.js":"11","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-values.js":"12","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-select.js":"13","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/uml-group-by-multiple-choice-sum.js":"14","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/uml-group-by-multiple-choice.js":"15","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/second-normal-form.js":"16","/Users/jannunzi/webdev/quiz-maker/src/db-design/uml/text-to-uml.js":"17","/Users/jannunzi/webdev/quiz-maker/src/db-design/relational-algebra/symbol.js":"18","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/first-normal-form.js":"19","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/third-normal-form.js":"20","/Users/jannunzi/webdev/quiz-maker/src/web-dev/widget-list/widget-list.js":"21","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-columns.js":"22","/Users/jannunzi/webdev/quiz-maker/src/db-design/relational-algebra/text.js":"23","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/radio.js":"24","/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/add.js":"25","/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/subtract.js":"26","/Users/jannunzi/webdev/quiz-maker/src/db-design/indexing/indexing-create-single-non-unique-index.js":"27","/Users/jannunzi/webdev/quiz-maker/src/db-design/transactions/transactions-non-repeatable-read.js":"28","/Users/jannunzi/webdev/quiz-maker/src/db-design/transactions/transactions-dirty-reads.js":"29","/Users/jannunzi/webdev/quiz-maker/src/db-design/indexing/indexing-create-composit-index.js":"30","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-min-max-choice.js":"31","/Users/jannunzi/webdev/quiz-maker/src/db-design/inline-views/true-false/inline-view-legal-true-false.js":"32","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-count-choice.js":"33","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/single-table/multiple-choice/group-by-single-table-multiple-choice.js":"34","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/spreader/spreader-object.js":"35","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/class/state-class-prev-state.js":"36","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/class/state1.js":"37","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/spreader/spreader-array.js":"38","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/class/props.js":"39","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/function/return/return.js":"40","/Users/jannunzi/webdev/quiz-maker/src/web-dev/web-dev.js":"41","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/function/use-state/t.js":"42","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/redux/state-redux.js":"43","/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-group-by-count-fill-blanks.js":"44","/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-join-multiple-choice.js":"45","/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-join-fill-blanks.js":"46","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/context-answer.js":"47","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-all.js":"48","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-by-multiple-fields.js":"49","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-by-id.js":"50","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-by-field.js":"51","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/project/mongo-project-include-several.js":"52","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-and.js":"53","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/project/mongo-project-exclude-id.js":"54","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/insert/mongo-insert.js":"55","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/update/mongo-update.js":"56","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/schema/mongoose-schema-number.js":"57","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-$gt.js":"58","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/update/mongo-replace.js":"59","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/remove/mongo-remove.js":"60","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/project/mongo-project-include-one.js":"61","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/schema/mongoose-schema-collection.js":"62","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/model/mongoose-model-find.js":"63","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-$eq.js":"64","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/schema/mongoose-schema-model.js":"65","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/model/mongoose-model-find-by-id.js":"66","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/model/mongoose-model-find-one.js":"67","/Users/jannunzi/webdev/quiz-maker/src/utils/utils.js":"68","/Users/jannunzi/webdev/quiz-maker/src/db-design/tables/table.js":"69","/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/nav1.js":"70","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/redux/counter.js":"71","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/fk.js":"72","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/diamond-shape.js":"73","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/clazz.js":"74","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/pk.js":"75","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/association-horizontal.js":"76","/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/class-diagram-horizontal.js":"77","/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/routing-navigation.js":"78","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/title.js":"79","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/value.js":"80","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/textarea.js":"81","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/labels-and-radios.js":"82","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/placeholder.js":"83","/Users/jannunzi/webdev/quiz-maker/src/web-dev/css/color-and-bg-color.js":"84","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/filter/filter.js":"85","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/map/map1.js":"86","/Users/jannunzi/webdev/quiz-maker/src/db-design/sql/insert-random-rows.js":"87","/Users/jannunzi/webdev/quiz-maker/src/db-design/sql/create-table.js":"88","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/classes/component-1.js":"89","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/classes/component-2.js":"90","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/classes/component-3.js":"91","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/classes/component-4.js":"92","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/redux/component-w.js":"93","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/redux/component-x.js":"94","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/redux/component-y.js":"95","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/redux/component-z.js":"96","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/functions/component-a.js":"97","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/functions/component-b.js":"98","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/functions/component-c.js":"99","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/functions/component-d.js":"100","/Users/jannunzi/webdev/quiz-maker/src/notebook/reducers/pages-reducer.js":"101","/Users/jannunzi/webdev/quiz-maker/src/notebook/actions/page-actions.js":"102","/Users/jannunzi/webdev/quiz-maker/src/notebook/components/pages/page-list.js":"103","/Users/jannunzi/webdev/quiz-maker/src/notebook/components/pages/page.js":"104","/Users/jannunzi/webdev/quiz-maker/src/notebook/components/notebooks/notebook.js":"105","/Users/jannunzi/webdev/quiz-maker/src/notebook/components/notebooks/notebook-list.js":"106","/Users/jannunzi/webdev/quiz-maker/src/notebook/actions/notebook-actions.js":"107","/Users/jannunzi/webdev/quiz-maker/src/notebook/reducers/notebooks-reducer.js":"108","/Users/jannunzi/webdev/quiz-maker/src/questions/fill-multiple-blanks.js":"109","/Users/jannunzi/webdev/quiz-maker/src/questions/fill-multiple-blanks-editor.js":"110","/Users/jannunzi/webdev/quiz-maker/src/vocabularies/index.js":"111","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/labels-for-input.js":"112"},{"size":710,"mtime":1634393611812,"results":"113","hashOfConfig":"114"},{"size":362,"mtime":1612038465266,"results":"115","hashOfConfig":"114"},{"size":676,"mtime":1614022389829,"results":"116","hashOfConfig":"114"},{"size":997,"mtime":1614023033977,"results":"117","hashOfConfig":"114"},{"size":17662,"mtime":1621650557809,"results":"118","hashOfConfig":"114"},{"size":343,"mtime":1614023059802,"results":"119","hashOfConfig":"114"},{"size":242,"mtime":1614022188816,"results":"120","hashOfConfig":"114"},{"size":248,"mtime":1614022247326,"results":"121","hashOfConfig":"114"},{"size":165,"mtime":1614022765042,"results":"122","hashOfConfig":"114"},{"size":169,"mtime":1614022780194,"results":"123","hashOfConfig":"114"},{"size":8837,"mtime":1619402221606,"results":"124","hashOfConfig":"114"},{"size":1698,"mtime":1613708606362,"results":"125","hashOfConfig":"114"},{"size":4737,"mtime":1613711035475,"results":"126","hashOfConfig":"114"},{"size":10091,"mtime":1619402221607,"results":"127","hashOfConfig":"114"},{"size":10783,"mtime":1614909064464,"results":"128","hashOfConfig":"114"},{"size":1624,"mtime":1619402221613,"results":"129","hashOfConfig":"114"},{"size":4631,"mtime":1614925559029,"results":"130","hashOfConfig":"114"},{"size":2377,"mtime":1619402221614,"results":"131","hashOfConfig":"114"},{"size":2209,"mtime":1619402221612,"results":"132","hashOfConfig":"114"},{"size":1528,"mtime":1619402221613,"results":"133","hashOfConfig":"114"},{"size":4224,"mtime":1615212454909,"results":"134","hashOfConfig":"114"},{"size":1930,"mtime":1613709183021,"results":"135","hashOfConfig":"114"},{"size":2010,"mtime":1619402221616,"results":"136","hashOfConfig":"114"},{"size":1124,"mtime":1615355240714,"results":"137","hashOfConfig":"114"},{"size":226,"mtime":1615513837493,"results":"138","hashOfConfig":"114"},{"size":236,"mtime":1615513863112,"results":"139","hashOfConfig":"114"},{"size":2461,"mtime":1619402221607,"results":"140","hashOfConfig":"114"},{"size":3699,"mtime":1619402221617,"results":"141","hashOfConfig":"114"},{"size":3256,"mtime":1619402221616,"results":"142","hashOfConfig":"114"},{"size":2554,"mtime":1619402221607,"results":"143","hashOfConfig":"114"},{"size":3004,"mtime":1614895327289,"results":"144","hashOfConfig":"114"},{"size":2682,"mtime":1614899342956,"results":"145","hashOfConfig":"114"},{"size":2852,"mtime":1614895509564,"results":"146","hashOfConfig":"114"},{"size":2237,"mtime":1614660698072,"results":"147","hashOfConfig":"114"},{"size":2898,"mtime":1634506103826,"results":"148","hashOfConfig":"114"},{"size":2739,"mtime":1619386368695,"results":"149","hashOfConfig":"114"},{"size":2651,"mtime":1619385067328,"results":"150","hashOfConfig":"114"},{"size":1311,"mtime":1619386813320,"results":"151","hashOfConfig":"114"},{"size":2377,"mtime":1615437830755,"results":"152","hashOfConfig":"114"},{"size":1819,"mtime":1615438668420,"results":"153","hashOfConfig":"114"},{"size":3260,"mtime":1634401937625,"results":"154","hashOfConfig":"114"},{"size":980,"mtime":1615353182202,"results":"155","hashOfConfig":"114"},{"size":4556,"mtime":1619385901745,"results":"156","hashOfConfig":"114"},{"size":5769,"mtime":1612132450607,"results":"157","hashOfConfig":"114"},{"size":6784,"mtime":1612121722675,"results":"158","hashOfConfig":"114"},{"size":5223,"mtime":1612123131454,"results":"159","hashOfConfig":"114"},{"size":1530,"mtime":1620184657435,"results":"160","hashOfConfig":"114"},{"size":1360,"mtime":1619060012828,"results":"161","hashOfConfig":"114"},{"size":2114,"mtime":1619060066048,"results":"162","hashOfConfig":"114"},{"size":1750,"mtime":1619060028580,"results":"163","hashOfConfig":"114"},{"size":1820,"mtime":1619060040983,"results":"164","hashOfConfig":"114"},{"size":1988,"mtime":1619062036684,"results":"165","hashOfConfig":"114"},{"size":1717,"mtime":1619060081754,"results":"166","hashOfConfig":"114"},{"size":1821,"mtime":1619402221608,"results":"167","hashOfConfig":"114"},{"size":2751,"mtime":1619402221608,"results":"168","hashOfConfig":"114"},{"size":2284,"mtime":1619402221609,"results":"169","hashOfConfig":"114"},{"size":1777,"mtime":1619402221611,"results":"170","hashOfConfig":"114"},{"size":1617,"mtime":1619059999729,"results":"171","hashOfConfig":"114"},{"size":2290,"mtime":1619402221609,"results":"172","hashOfConfig":"114"},{"size":1882,"mtime":1619402221608,"results":"173","hashOfConfig":"114"},{"size":1897,"mtime":1619062450455,"results":"174","hashOfConfig":"114"},{"size":2025,"mtime":1619402221610,"results":"175","hashOfConfig":"114"},{"size":1676,"mtime":1619402221610,"results":"176","hashOfConfig":"114"},{"size":1595,"mtime":1619060090388,"results":"177","hashOfConfig":"114"},{"size":2217,"mtime":1619402221610,"results":"178","hashOfConfig":"114"},{"size":1822,"mtime":1619402221609,"results":"179","hashOfConfig":"114"},{"size":2012,"mtime":1621648475465,"results":"180","hashOfConfig":"114"},{"size":10455,"mtime":1634511655948,"results":"181","hashOfConfig":"114"},{"size":1224,"mtime":1612130548569,"results":"182","hashOfConfig":"114"},{"size":1580,"mtime":1634405773932,"results":"183","hashOfConfig":"114"},{"size":515,"mtime":1619385713099,"results":"184","hashOfConfig":"114"},{"size":105,"mtime":1619402221618,"results":"185","hashOfConfig":"114"},{"size":346,"mtime":1614921773242,"results":"186","hashOfConfig":"114"},{"size":1545,"mtime":1614906007859,"results":"187","hashOfConfig":"114"},{"size":105,"mtime":1619402221619,"results":"188","hashOfConfig":"114"},{"size":2336,"mtime":1614926627236,"results":"189","hashOfConfig":"114"},{"size":1097,"mtime":1614906568882,"results":"190","hashOfConfig":"114"},{"size":1288,"mtime":1615514923702,"results":"191","hashOfConfig":"114"},{"size":2250,"mtime":1634519260185,"results":"192","hashOfConfig":"114"},{"size":1966,"mtime":1634517764036,"results":"193","hashOfConfig":"114"},{"size":2278,"mtime":1615505268801,"results":"194","hashOfConfig":"114"},{"size":2560,"mtime":1634399935607,"results":"195","hashOfConfig":"114"},{"size":2157,"mtime":1634520427505,"results":"196","hashOfConfig":"114"},{"size":1940,"mtime":1634514260271,"results":"197","hashOfConfig":"114"},{"size":2187,"mtime":1634524541988,"results":"198","hashOfConfig":"114"},{"size":1575,"mtime":1634525443926,"results":"199","hashOfConfig":"114"},{"size":1527,"mtime":1612051770369,"results":"200","hashOfConfig":"114"},{"size":1398,"mtime":1612051420468,"results":"201","hashOfConfig":"114"},{"size":358,"mtime":1620358706465,"results":"202","hashOfConfig":"114"},{"size":307,"mtime":1620358836793,"results":"203","hashOfConfig":"114"},{"size":307,"mtime":1620358859787,"results":"204","hashOfConfig":"114"},{"size":253,"mtime":1620358859783,"results":"205","hashOfConfig":"114"},{"size":420,"mtime":1620359189309,"results":"206","hashOfConfig":"114"},{"size":210,"mtime":1620359030383,"results":"207","hashOfConfig":"114"},{"size":208,"mtime":1620359540716,"results":"208","hashOfConfig":"114"},{"size":314,"mtime":1620359577062,"results":"209","hashOfConfig":"114"},{"size":263,"mtime":1620358315714,"results":"210","hashOfConfig":"114"},{"size":240,"mtime":1620358315716,"results":"211","hashOfConfig":"114"},{"size":240,"mtime":1620358330628,"results":"212","hashOfConfig":"114"},{"size":184,"mtime":1620358351403,"results":"213","hashOfConfig":"114"},{"size":1886,"mtime":1620904861472,"results":"214","hashOfConfig":"114"},{"size":1024,"mtime":1620904847891,"results":"215","hashOfConfig":"114"},{"size":1640,"mtime":1620905119703,"results":"216","hashOfConfig":"114"},{"size":590,"mtime":1620903810771,"results":"217","hashOfConfig":"114"},{"size":551,"mtime":1620906220540,"results":"218","hashOfConfig":"114"},{"size":1637,"mtime":1620906383399,"results":"219","hashOfConfig":"114"},{"size":754,"mtime":1620905748112,"results":"220","hashOfConfig":"114"},{"size":1141,"mtime":1620906047478,"results":"221","hashOfConfig":"114"},{"size":1608,"mtime":1621908971002,"results":"222","hashOfConfig":"114"},{"size":1060,"mtime":1621909091484,"results":"223","hashOfConfig":"114"},{"size":4062,"mtime":1621908951729,"results":"224","hashOfConfig":"114"},{"size":2058,"mtime":1634398738475,"results":"225","hashOfConfig":"114"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"229"},"2m27wn",{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"229"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"229"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"229"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"229"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"229"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"229"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"229"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"229"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"229"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"229"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"229"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"229"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"229"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"229"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"229"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"229"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"229"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"229"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"229"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"229"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"229"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"229"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"229"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"229"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"229"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"229"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"229"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"229"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"229"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"229"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"229"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"229"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"229"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"229"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"229"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"229"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"229"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"229"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"229"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"229"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"229"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"229"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"229"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"229"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"229"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"229"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"229"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"475"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"229"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497","usedDeprecatedRules":"229"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"229"},"/Users/jannunzi/webdev/quiz-maker/src/index.js",["503","504"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport CounterReactState from \"./counter/react-state/counter-react-state\";\nimport CounterRedux from \"./counter/redux-state/counter-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n       <App/>\n   </React.StrictMode>,\n   document.getElementById('root')\n );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["505","506"],"/Users/jannunzi/webdev/quiz-maker/src/reportWebVitals.js",[],"/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/counter-react-state.js",[],"/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-redux.js",[],"/Users/jannunzi/webdev/quiz-maker/src/App.js",["507"],"import 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter, Link, Route, useParams} from \"react-router-dom\";\nimport DatabaseDesign from \"./db-design/db-design\";\nimport WebDevelopment from \"./web-dev/web-dev\";\nimport DbDesignQueryJoinMultipleChoice from \"./db-design/query/join/fill-blanks/query-join-multiple-choice\";\nimport DbDesignQueryJoinFillBlanks from \"./db-design/query/join/fill-blanks/query-join-fill-blanks\";\nimport DbDesignQueryGroupByCountFillBlanks from \"./db-design/query/join/fill-blanks/query-group-by-count-fill-blanks\";\n\nimport DbDesignInsertIntoValues from \"./db-design/insert/insert-into-values\";\nimport DbDesignInsertIntoColumns from \"./db-design/insert/insert-into-columns\";\nimport DbDesignInsertIntoSelect from \"./db-design/insert/insert-into-select\";\n\nimport GroupBySingleTableMultipleChoice from \"./db-design/group-by/single-table/multiple-choice/group-by-single-table-multiple-choice\"\nimport GroupByTwoTablesMultipleMinMaxChoice from \"./db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-min-max-choice\";\nimport GroupByTwoTablesMultipleCountChoice\n    from \"./db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-count-choice\";\nimport InlineViewLegalTrueFalse from \"./db-design/inline-views/true-false/inline-view-legal-true-false\";\nimport UmlGroupByMultipleChoice from \"./db-design/group-by/uml-group-by-multiple-choice\";\nimport UmlGroupByMultipleSum from \"./db-design/group-by/uml-group-by-multiple-choice-sum\";\nimport FirstNormalForm from \"./db-design/normalization/first-normal-form\";\nimport SecondNormalForm from \"./db-design/normalization/second-normal-form\";\nimport ThirdNormalForm from \"./db-design/normalization/third-normal-form\";\nimport TextToUml from \"./db-design/uml/text-to-uml\";\nimport RelationalAlgebraSymbol from \"./db-design/relational-algebra/symbol\";\nimport RelationalAlgebraText from \"./db-design/relational-algebra/text\";\nimport WidgetList from \"./web-dev/widget-list/widget-list\";\nimport T from \"./web-dev/react/state/function/use-state/t\";\nimport Radios from \"./web-dev/html/radio\";\nimport Toggle from \"./web-dev/react/state/class/state1\";\nimport StateRedux from \"./web-dev/react/state/redux/state-redux\";\nimport SpreaderArray from \"./web-dev/es6/spreader/spreader-array\";\nimport SpreaderObject from \"./web-dev/es6/spreader/spreader-object\";\nimport StateClassPrevState from \"./web-dev/react/state/class/state-class-prev-state\";\nimport ReactClassProps from \"./web-dev/react/class/props\";\nimport ReactFunctionReturn from \"./web-dev/react/function/return/return\";\nimport Add from \"./web-dev/routing/add\";\nimport Subtract from \"./web-dev/routing/subtract\";\nimport {MongoFindAll} from \"./db-design/mongodb/mongo/find/mongo-find-all\";\nimport {MongoFindById} from \"./db-design/mongodb/mongo/find/mongo-find-by-id\";\nimport {MongoFindByField} from \"./db-design/mongodb/mongo/find/mongo-find-by-field\";\nimport {MongoFindByMultipleFields} from \"./db-design/mongodb/mongo/find/mongo-find-by-multiple-fields\";\nimport {MongoFindAnd} from \"./db-design/mongodb/mongo/find/mongo-find-and\";\nimport {MongoFind$Eq} from \"./db-design/mongodb/mongo/find/mongo-find-$eq\";\nimport {MongoFind$Gt} from \"./db-design/mongodb/mongo/find/mongo-find-$gt\";\nimport {MongoProjectIncludeOne} from \"./db-design/mongodb/mongo/project/mongo-project-include-one\";\nimport {MongoProjectIncludeSeveral} from \"./db-design/mongodb/mongo/project/mongo-project-include-several\";\nimport {MongoProjectExcludeId} from \"./db-design/mongodb/mongo/project/mongo-project-exclude-id\";\nimport {MongoInsert} from \"./db-design/mongodb/mongo/insert/mongo-insert\";\nimport {MongoUpdate} from \"./db-design/mongodb/mongo/update/mongo-update\";\nimport {MongoReplace} from \"./db-design/mongodb/mongo/update/mongo-replace\";\nimport {MongoRemove} from \"./db-design/mongodb/mongo/remove/mongo-remove\";\nimport {MongooseSchemaNumber} from \"./db-design/mongodb/mongoose/schema/mongoose-schema-number\";\nimport {MongooseSchemaCollection} from \"./db-design/mongodb/mongoose/schema/mongoose-schema-collection\";\nimport {MongooseSchemaModel} from \"./db-design/mongodb/mongoose/schema/mongoose-schema-model\";\nimport {MongooseModelFind} from \"./db-design/mongodb/mongoose/model/mongoose-model-find\";\nimport {MongooseModelFindById} from \"./db-design/mongodb/mongoose/model/mongoose-model-find-by-id\";\nimport {MongooseModelFindOne} from \"./db-design/mongodb/mongoose/model/mongoose-model-find-one\";\nimport {IndexingCreateSingleNonUniqueIndex} from \"./db-design/indexing/indexing-create-single-non-unique-index\";\nimport {IndexingCreateCompositeIndex} from \"./db-design/indexing/indexing-create-composit-index\";\nimport {TransactionsDirtyRead} from \"./db-design/transactions/transactions-dirty-reads\";\nimport {TransactionsNonRepeatableRead} from \"./db-design/transactions/transactions-non-repeatable-read\";\nimport ContextAnswer from \"./web-dev/react/context/context-answer\";\nimport {ComponentA} from \"./web-dev/react/context/example1/prop-drilling/functions/component-a\";\nimport Component1 from \"./web-dev/react/context/example1/prop-drilling/classes/component-1\";\nimport {ComponentW} from \"./web-dev/react/context/example1/redux/component-w\";\nimport {Notebook} from \"./notebook/components/notebooks/notebook\";\nimport NotebookList from \"./notebook/components/notebooks/notebook-list\";\n\nimport {Provider} from 'react-redux';\nimport {combineReducers, createStore} from \"redux\";\nimport {pagesReducer} from \"./notebook/reducers/pages-reducer\";\nimport {notebooksReducer} from \"./notebook/reducers/notebooks-reducer\";\nimport FillMultipleBlanksEditor from \"./questions/fill-multiple-blanks-editor\";\n\nconst reducer = combineReducers({\n    pagesReducer, notebooksReducer\n});\nconst store = createStore(reducer);\n\n\nfunction App() {\n    return (\n        <Provider store={store}>\n        <BrowserRouter>\n            <div className=\"container-fluid\">\n                {/*<h1>Quiz Maker</h1>*/}\n                <Route exact={true}\n                       path={[\n                           \"/notebooks/:notebookId\",\n                           \"/notebooks/:notebookId/pages/:pageId\",\n                       ]}>\n                    <Notebook/>\n                </Route>\n                <Route exact={true}\n                       path={[\n                           \"/www\",\n                           \"/notebooks\",\n                       ]}>\n                    <NotebookList/>\n                </Route>\n\n                <div className=\"row\">\n                    <div className=\"col-2\">\n                        <div>\n                            <Link to=\"/db-design\" className=\"list-group-item\">DB</Link>\n                            <Link to=\"/web-dev\" className=\"list-group-item\">WebDev</Link>\n                            <Link to=\"/fill-multiple-blanks/editor\" className=\"list-group-item\">FMB Editor</Link>\n                        </div>\n                    </div>\n                    <div className=\"col-10\">\n\n                        <Route path=\"/fill-multiple-blanks/editor\">\n                            <FillMultipleBlanksEditor/>\n                        </Route>\n                        \n                        <Route path=\"/add/:a/:b\">\n                            <Add/>\n                        </Route>\n                        <Route path=\"/sub/:c/:d\">\n                            <Subtract/>\n                        </Route>\n\n\n                        <>\n                        <Route path=\"/db-design\" exact component={DatabaseDesign}/>\n                        <>\n                            <Route path=\"/db-design/transactions/transactions-non-repeatable-reads\"\n                                   exact component={TransactionsNonRepeatableRead}/>\n                            <Route path=\"/db-design/transactions/transactions-dirty-reads\"\n                                   exact component={TransactionsDirtyRead}/>\n                        </>\n                        <>\n                            <Route path=\"/db-design/indexing/indexing-create-composite\"\n                                   exact component={IndexingCreateCompositeIndex}/>\n                            <Route path=\"/db-design/indexing/indexing-create-single-non-unique\"\n                                   exact component={IndexingCreateSingleNonUniqueIndex}/>\n                        </>\n                        <>\n                            <Route path=\"/db-design/mongodb/mongoose/model/mongoose-model-find-one\"\n                                   exact component={MongooseModelFindOne}/>\n                            <Route path=\"/db-design/mongodb/mongoose/model/mongoose-model-find-by-id\"\n                                   exact component={MongooseModelFindById}/>\n                            <Route path=\"/db-design/mongodb/mongoose/model/mongoose-model-find\"\n                                   exact component={MongooseModelFind}/>\n                        </>\n                        <>\n                            <Route path=\"/db-design/mongodb/mongoose/schema/mongoose-schema-model\"\n                                   exact component={MongooseSchemaModel}/>\n                            <Route path=\"/db-design/mongodb/mongoose/schema/mongoose-schema-collection\"\n                                   exact component={MongooseSchemaCollection}/>\n                            <Route path=\"/db-design/mongodb/mongoose/schema/mongoose-schema-number\"\n                                   exact component={MongooseSchemaNumber}/>\n                        </>\n                        <>\n                            <Route path=\"/db-design/mongodb/mongo/remove/mongo-remove\"\n                                   exact component={MongoRemove}/>\n                        </>\n                        <>\n                            <Route path=\"/db-design/mongodb/mongo/update/mongo-replace\"\n                                   exact component={MongoReplace}/>\n                            <Route path=\"/db-design/mongodb/mongo/update/mongo-update\"\n                                   exact component={MongoUpdate}/>\n                        </>\n                        <>\n                            <Route path=\"/db-design/mongodb/mongo/insert/mongo-insert\"\n                                   exact component={MongoInsert}/>\n                        </>\n                        <>\n                            <Route path=\"/db-design/mongodb/mongo/project/mongo-project-exclude-id\"\n                                   exact component={MongoProjectExcludeId}/>\n                            <Route path=\"/db-design/mongodb/mongo/project/mongo-project-include-several\"\n                                   exact component={MongoProjectIncludeSeveral}/>\n                            <Route path=\"/db-design/mongodb/mongo/project/mongo-project-only-one\"\n                                   exact component={MongoProjectIncludeOne}/>\n                        </>\n                        <>\n                            <Route path=\"/db-design/mongodb/mongo/mongo-find-$gt\"\n                                   exact component={MongoFind$Gt}/>\n                            <Route path=\"/db-design/mongodb/mongo/mongo-find-$eq\"\n                                   exact component={MongoFind$Eq}/>\n                            <Route path=\"/db-design/mongodb/mongo/mongo-find-and\"\n                                   exact component={MongoFindAnd}/>\n                            <Route path=\"/db-design/mongodb/mongo/mongo-find-by-multiple-fields\"\n                                   exact component={MongoFindByMultipleFields}/>\n                            <Route path=\"/db-design/mongodb/mongo/mongo-find-by-field\"\n                                   exact component={MongoFindByField}/>\n                            <Route path=\"/db-design/mongodb/mongo/mongo-find-by-id\"\n                                   exact component={MongoFindById}/>\n                            <Route path=\"/db-design/mongodb/mongo/mongo-find-all\"\n                                   exact component={MongoFindAll}/>\n                        </>\n                            </>\n                        \n                        \n                        <>\n                            <Route path=\"/web-dev/react/context/example1/redux\"\n                                   exact\n                                   component={ComponentW}/>\n                            <Route path=\"/web-dev/react/context/example1/prop-drill/classes\"\n                                   exact\n                                   component={Component1}/>\n                            <Route path=\"/web-dev/react/context/example1/prop-drill\"\n                                   exact\n                                   component={ComponentA}/>\n                            <Route path=\"/web-dev/react/context\" exact\n                                   component={ContextAnswer}/>\n                        </>\n                        \n                        <>\n                            <Route path=\"/web-dev/react/function/return\" exact\n                                   component={ReactFunctionReturn}/>\n\n                            <Route path=\"/web-dev/react/class/props\" exact\n                                   component={ReactClassProps}/>\n\n                        </>\n                        <>\n                            <Route path=\"/web-dev/es6/spreader/array\" exact\n                                   component={SpreaderArray}/>\n                            <Route path=\"/web-dev/es6/spreader/object\" exact\n                                   component={SpreaderObject}/>\n                        </>\n                        <>\n                            <Route path=\"/web-dev/react/state/class/prev-state\" exact\n                                   component={StateClassPrevState}/>\n                                   \n                            <Route path=\"/web-dev/react/state/redux\" exact\n                                   component={StateRedux}/>\n\n                            <Route path=\"/web-dev/react/state/class\" exact\n                                   component={Toggle}/>\n\n                            <Route path=\"/web-dev/html/radio\" exact\n                                   component={Radios}/>\n\n                            <Route path=\"/web-dev/widget-list\" exact\n                                   component={WidgetList}/>\n\n                            <Route path=\"/db-design/relational-algebra/text\" exact\n                                   component={RelationalAlgebraText}/>\n                            <Route path=\"/db-design/relational-algebra/symbol\" exact\n                                   component={RelationalAlgebraSymbol}/>\n\n                            <Route path=\"/db-design/uml/text-to-uml\" exact\n                                   component={TextToUml}/>\n\n                            <Route path=\"/db-design/normalization/third-normal-form\" exact\n                                   component={ThirdNormalForm}/>\n                            <Route path=\"/db-design/normalization/second-normal-form\" exact\n                                   component={SecondNormalForm}/>\n                            <Route path=\"/db-design/normalization/first-normal-form\" exact\n                                   component={FirstNormalForm}/>\n\n                            <Route path=\"/db-design/inline-views/true-false\" exact\n                                   component={InlineViewLegalTrueFalse}/>\n\n                            <Route path=\"/db-design/group-by/uml-group-by-multiple-choice-sum\" exact\n                                   component={UmlGroupByMultipleSum}/>\n                            <Route path=\"/db-design/group-by/uml-group-by-multiple-choice\" exact\n                                   component={UmlGroupByMultipleChoice}/>\n                            <Route path=\"/db-design/group-by/single-table/multiple-choice\" exact\n                                   component={GroupBySingleTableMultipleChoice}/>\n                            <Route path=\"/db-design/group-by/two-tables/min-max/multiple-choice\" exact\n                                   component={GroupByTwoTablesMultipleMinMaxChoice}/>\n                            <Route path=\"/db-design/group-by/two-tables/count/multiple-choice\" exact\n                                   component={GroupByTwoTablesMultipleCountChoice}/>\n\n\n                            <Route path=\"/db-design/query/join/multiple-choice\" exact\n                                   component={DbDesignQueryJoinMultipleChoice}/>\n                            <Route path=\"/db-design/query/join/fill-blanks\" exact\n                                   component={DbDesignQueryJoinFillBlanks}/>\n                            <Route path=\"/db-design/query/group-by/fill-blanks\" exact\n                                   component={DbDesignQueryGroupByCountFillBlanks}/>\n\n                            <Route path=\"/db-design/insert/fill-blanks/insert-into-values\" exact\n                                   component={DbDesignInsertIntoValues}/>\n                            <Route path=\"/db-design/insert/fill-blanks/insert-into-columns\" exact\n                                   component={DbDesignInsertIntoColumns}/>\n                            <Route path=\"/db-design/insert/fill-blanks/insert-into-select\" exact\n                                   component={DbDesignInsertIntoSelect}/>\n                        </>\n                        <Route path=\"/web-dev\" exact component={WebDevelopment}/>\n                        <>\n                            <Route path=\"/web-dev/react/function/use-state\" exact component={T}/>\n                            \n                        </>\n                    </div>\n                </div>\n            </div>\n        </BrowserRouter>\n        </Provider>\n    );\n}\n\nexport default App;\n","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/counter-display.js",["508"],"import React from 'react'\nimport {connect} from 'react-redux'\n\nclass CounterDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <h1>Count: {this.props.counter}</h1>\n        );\n    }\n}\n\nexport default connect((state) => ({counter: state.counter}))(CounterDisplay)\n","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/up-component.js",["509"],"import React from 'react'\n\nexport default class UpComponent extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render() {\n        return(\n            <button onClick={this.props.up}>Up</button>\n        )\n    }\n}\n","/Users/jannunzi/webdev/quiz-maker/src/counter/react-state/down-component.js",["510"],"import React from 'react'\n\nexport default class DownComponent extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    render() {\n        return(\n            <button onClick={this.props.down}>Down</button>\n        )\n    }\n}\n","/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-up.js",[],"/Users/jannunzi/webdev/quiz-maker/src/counter/redux-state/counter-down.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/db-design.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-values.js",["511"],"import React from 'react';\nimport {randomData, randomStringCapitalized} from \"../../utils/utils\";\nimport Table from \"../tables/table\";\n\nexport default () => {\n    const randomTableNameA = randomStringCapitalized(2);\n    const schemaA = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameA,\n        columns: [\n            {\n                name: `${randomTableNameA}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameA}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameA}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameA}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    let tableDataA = randomData({\n        schema: schemaA,\n        rowCount: 3\n    });\n    let tableDataB = randomData({\n        schema: schemaA,\n        rowCount: 1\n    });\n\n    return(\n        <>\n            <h2>DB Design Insert Into Values</h2>\n            <div>\n            Consider the following table {randomTableNameA}:\n            <br/>\n            <br/>\n            <Table schema={schemaA} tableData={tableDataA}/>\n                Fill in the blanks below to insert a new record that looks like this:\n            <br/>\n            <br/>\n            <Table schema={schemaA} tableData={tableDataB}/>\n            INSERT [INTO] {randomTableNameA} [VALUES]<br/>\n            ([{tableDataB[0][0]}], [{tableDataB[0][1]}], [{tableDataB[0][2]}], [{tableDataB[0][3]}])\n\n            </div>\n        </>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-select.js",["512"],"import React from 'react';\nimport {randomData, randomStringCapitalized} from \"../../utils/utils\";\nimport Table from \"../tables/table\";\n\nexport default () => {\n    const randomTableNameA = randomStringCapitalized(2);\n    const randomTableNameB = randomStringCapitalized(2);\n    const randomTableNameC = randomStringCapitalized(2);\n    const schemaA = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameA,\n        columns: [\n            {\n                name: `${randomTableNameA}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameA}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameA}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameA}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    const schemaB = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameB,\n        columns: [\n            {\n                name: `${randomTableNameB}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameB}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameB}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameB}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    const schemaC = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameC,\n        columns: [\n            {\n                name: `${randomTableNameC}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameC}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameC}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameC}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    let tableDataA = randomData({\n        schema: schemaA,\n        rowCount: 3\n    });\n    let tableDataB = randomData({\n        schema: schemaB,\n        rowCount: 3\n    });\n    let tableDataC = randomData({\n        schema: schemaC,\n        rowCount: 3\n    });\n\n    return(\n        <>\n            <h2>DB Design Insert Into Select</h2>\n            <div>\n            Consider the following tables {randomTableNameA}, {randomTableNameB}, and {randomTableNameC}:\n            <br/>\n            <br/>\n\n            <table>\n                <tr>\n                    <td>\n                        <Table schema={schemaA} tableData={tableDataA}/>\n                    </td>\n                    <td>\n\n                    </td>\n                    <td>\n                        <Table schema={schemaB} tableData={tableDataB}/>\n                    </td>\n                    <td>\n\n                    </td>\n                    <td>\n                        <Table schema={schemaC} tableData={tableDataC}/>\n                    </td>\n                </tr>\n            </table>\n                Fill in the blanks below to copy records from {randomTableNameB} and {randomTableNameC} into {randomTableNameA}.<br/>\n                All primary keys are auto generated and should be left to the database to figure out their\n                value when creating new records.<br/>\n                Do not insert primary keys since these are auto generated.<br/>\n                Fill in the column names below in the same order as shown above.<br/>\n                Copy the first two columns of {randomTableNameA} from the first two columns of {randomTableNameB} and the last column from {randomTableNameC}.<br/>\n                Ignore the WHERE clause.\n            <br/>\n            <br/>\n            INSERT [INTO] {randomTableNameA}<br/>\n            (\n                [{schemaA.columns[1].name}],\n                [{schemaA.columns[2].name}],\n                [{schemaA.columns[3].name}]\n            )<br/>\n            SELECT\n            (\n                [{schemaB.columns[1].name}] AS [{schemaA.columns[1].name}_1],\n                [{schemaB.columns[2].name}] [AS] {schemaA.columns[2].name},\n                {schemaC.columns[3].name} [AS_1] [{schemaA.columns[3].name}_1]\n            )<br/>\n            FROM {randomTableNameB}, {randomTableNameC}<br/>\n            WHERE ...\n            </div>\n        </>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/uml-group-by-multiple-choice-sum.js",["513"],"import React from 'react'\nimport Clazz from \"../utils/clazz\";\nimport ClassDiagramHorizontal from \"../utils/class-diagram-horizontal\";\nimport {destinations, education, randomArrayElement, randomInt, randomSet, work} from \"../../utils/utils\";\nimport AssociationHorizontal from \"../utils/association-horizontal\";\nconst UmlGroupByMultipleSum = () => {\n\n    const randomStrings = randomSet(18, work);\n    const randomStrings2 = randomSet(16, education);\n    \n    const airlineClass      = randomStrings[0].toUpperCase();//\"airline\";//randomStrings[0];//\"airline\";//randomStrings[0]\n    const flightClass       = randomStrings[1].toUpperCase();//\"flight\";//randomStrings[1];//\"flight\";//randomStrings[1]\n    const reservationClass  = randomStrings[2].toUpperCase();//\"reservation\";\n    const ticketClass       = randomStrings[3].toUpperCase();//\"ticket\";//randomStrings[3];//\"ticket\";//randomStrings[3]\n    const passengerClass    = randomStrings[4];//\"passenger\";//randomStrings[4];//\"passenger\";//randomStrings[4]\n    \n    const airlineId         = randomStrings[5];//\"aid\";//randomStrings[6];//\"did\";// randomStrings2[0];\n    const airlineName       = randomStrings[6];//\"name\";//randomStrings[7];//\"name\";    \n    \n    const flightId          = randomStrings[7];//\"fid\";//randomStrings[8];//\"cid\";\n    const flightType        = randomStrings[8];//\"type\";//randomStrings[9];//\"title\";\n    const flightSource      = randomStrings[9];//\"source\";//randomStrings[10];//\"credits\";\n    const flightDestination = randomStrings[10];//\"destination\";//randomStrings[10];//\"credits\";\n    const flightDuration    = randomStrings[11];//\"duration\";//randomStrings[10];//\"credits\";\n        \n    const reservationId     = randomStrings[12];//\"rid\";//randomStrings[11];//\"scid\";\n    const reservationBookingAgent = randomStrings[13];//\"bookingAgent\";//randomStrings[12];//\"building\";\n    const reservationType   = randomStrings[14];//\"type\";//randomStrings[13];//\"room\";\n    // const reservationTime = randomStrings[14];//\"time\";\n    \n    const ticketId          = randomStrings[15];//\"tid\";//randomStrings[15];//\"eid\";\n    const ticketPrice       = randomStrings[16];//\"price\";//randomStrings[16];//\"semester\";\n    const ticketBoardingDate = randomStrings[17];//\"boardingDate\";//randomStrings[17];//\"enrolled\";\n    const ticketType        = randomStrings2[10];//\"type\";//randomStrings2[14];//\"grade\";\n\n    const passengerId       = randomStrings2[0];//\"pid\";//randomStrings2[0];//\"sid\";\n    const passengerLast     = randomStrings2[1];//\"last\";//randomStrings2[1];//\"last\";\n    const passengerFirst    = randomStrings2[2];//\"first\";//randomStrings2[2];//\"first\";\n    const passengerAge      = randomStrings2[3];//\"age\";//randomStrings2[3];//\"address\";\n    const passengerEmail    = randomStrings2[4];//\"email\";//randomStrings2[4];//\"grade\";\n    const passengerContact  = randomStrings2[5];//\"contact\";//randomStrings2[4];//\"grade\";\n    \n    const NewYork           = randomArrayElement(destinations);//\"NewYork\";//randomStrings2[8];//\"NewYork\";\n    const FourHundred       = randomInt(1000);//randomStrings2[9];//\"FourHundred\";\n    \n    const passengerRename   = randomStrings2[6];//\"s\";\n    const reservationRename = randomStrings2[7];//\"s\";\n    const ticketRename      = randomStrings2[8];//\"e\";\n    const flightRename      = randomStrings2[9];//\"c\";\n    \n    return(\n        <div>\n            <h1>UML Group By Multiple Choice Sum</h1>\n            <div id=\"questionABC\">\n                Consider the following UML class diagram:\n                <br/>\n                <br/>\n\n                <ClassDiagramHorizontal\n                associations={[\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: \"*\"}}\n                        right={{cardinality: 1}}/>,\n                ]}\n                classes={[\n                    <Clazz clazzName={airlineClass}\n                           fields={[\n                               {name: airlineId, pk: true},\n                               {name: airlineName}\n                           ]}/>,\n                    <Clazz clazzName={flightClass}\n                           fields={[\n                               {name: flightId, pk: true},\n                               {name: flightType},\n                               {name: flightSource},\n                               {name: flightDestination},\n                               {name: flightDuration},\n                               {name: airlineId, fk: true},\n                           ]}/>,\n                    <Clazz clazzName={reservationClass}\n                           fields={[\n                               {name: reservationId, pk: true},\n                               {name: reservationBookingAgent},\n                               {name: reservationType},\n                               {name: flightId, fk: true},\n                           ]}/>,\n                    <Clazz clazzName={ticketClass}\n                           fields={[\n                               {name: ticketId, pk: true},\n                               {name: reservationId, fk: true},\n                               {name: passengerId, fk: true},\n                               {name: ticketPrice},\n                               {name: ticketBoardingDate},\n                               {name: ticketType},\n                           ]}/>,\n                    <Clazz clazzName={passengerClass}\n                           fields={[\n                               {name: passengerId, pk: true},\n                               {name: passengerFirst},\n                               {name: passengerLast},\n                               {name: passengerAge},\n                               {name: passengerEmail},\n                               {name: passengerContact},\n                               {name: ticketId, fk: true},\n                           ]}/>,\n                ]}\n            />\n            <div style={{clear: \"both\"}}>\n                <br/>\n                Which of the SQL statements below best implements\n                the following query?\n                <br/>\n                <br/>\n\n                \"Which records in <b>{reservationClass}</b>s are related to\n                <br/>\n                &nbsp;records in <b>{flightClass}</b> whose field <b>{flightDestination}</b> is <b>\"{NewYork}\"</b>\n                <br/>\n                {/*&nbsp;and which have a total cost of ${FourHundred} or more,*/}\n                {/*<br/>*/}\n                {/*&nbsp;and the total cost of a {reservationClass} is*/}\n                {/*<br/>*/}\n                &nbsp;and the <b>SUM</b> of the <b>{ticketPrice}</b>s of all the <b>{ticketClass}</b>s\n                <br/>\n                &nbsp;related to <b>{reservationClass}</b> is more than <b>${FourHundred}</b>\"\n                <br/>\n\n            </div>\n            </div>\n            <div id=\"answersABC\">\n                <hr/>\n                SELECT {reservationRename}.{reservationId}, SUM({ticketRename}.{ticketPrice})\n                <br/>\n                FROM {reservationClass} {reservationRename}, {flightClass} {flightRename}, {ticketClass} {ticketRename}\n                <br/>\n                WHERE {flightRename}.{flightId} = {reservationRename}.{flightId}\n                <br/>\n                AND {flightRename}.{flightDestination} = '{NewYork}'\n                <br/>\n                AND {reservationRename}.{reservationId} = {ticketRename}.{reservationId}\n                <br/>\n                GROUP BY {reservationRename}.{reservationId}\n                <br/>\n                HAVING SUM({ticketRename}.{ticketPrice}) > {FourHundred}\n\n                <hr/>\n                \n                SELECT {reservationRename}.{reservationId}, SUM({ticketRename}.{ticketPrice}) > {FourHundred}\n                <br/>\n                FROM {reservationClass} {reservationRename}, {flightClass} {flightRename}, {ticketClass} {ticketRename}\n                <br/>\n                WHERE {flightRename}.{flightId} = {reservationRename}.{flightId}\n                <br/>\n                AND {flightRename}.{flightDestination} = '{NewYork}'\n                <br/>\n                AND {reservationRename}.{reservationId} = {ticketRename}.{reservationId}\n                <br/>\n                GROUP BY {reservationRename}.{reservationId}\n                \n                <hr/>\n\n                SELECT {reservationRename}.{reservationId}, SUM({ticketRename}.{ticketPrice})\n                <br/>\n                FROM {reservationClass} {reservationRename}, {flightClass} {flightRename}, {ticketClass} {ticketRename}\n                <br/>\n                WHERE {flightRename}.{flightId} = {reservationRename}.{flightId}\n                <br/>\n                AND {flightRename}.destination = '{NewYork}'\n                <br/>\n                AND {reservationRename}.{reservationId} = {ticketRename}.{reservationId}\n                <br/>\n                HAVING SUM({ticketRename}.{ticketPrice}) >= {FourHundred}\n                \n                <hr/>\n\n                SELECT {reservationRename}.{reservationId}, SUM({ticketRename}.{ticketPrice})\n                <br/>\n                FROM {reservationClass} {reservationRename}, {flightClass} {flightRename}, {ticketClass} {ticketRename}\n                <br/>\n                WHERE {flightRename}.{flightId} = {reservationRename}.{flightId}\n                <br/>\n                AND {flightRename}.destination = '{NewYork}'\n                <br/>\n                AND {reservationRename}.{reservationId} = {ticketRename}.{reservationId}\n                \n                <hr/>\n\n            </div>\n        </div>\n    )\n}\nexport default UmlGroupByMultipleSum","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/uml-group-by-multiple-choice.js",["514","515","516","517"],"import React from 'react'\nimport Clazz from \"../utils/clazz\";\nimport ClassDiagramHorizontal from \"../utils/class-diagram-horizontal\";\nimport {education, randomSet, work} from \"../../utils/utils\";\nimport AssociationHorizontal from \"../utils/association-horizontal\";\nconst UmlGroupByMultipleChoice = () => {\n\n    const randomStrings = randomSet(18, work);\n    const randomStrings2 = randomSet(16, education);\n    const departmentClass = randomStrings[0];//\"department\";//randomStrings[0]\n    const courseClass = randomStrings[1];//\"course\";//randomStrings[1]\n    const sectionClass = randomStrings[2];//\"section\";//randomStrings[2]\n    const enrollmentClass = randomStrings[3];//\"enrollment\";//randomStrings[3]\n    const studentClass = randomStrings[4];//\"student\";//randomStrings[4]\n    const zipClass = randomStrings[5];//\"zip\";//randomStrings[5]\n    \n    const departmentId = randomStrings[6];//\"did\";// randomStrings2[0];\n    const departmentName = randomStrings[7];//\"name\";    \n    \n    const courseId = randomStrings[8];//\"cid\";\n    const courseTitle = randomStrings[9];//\"title\";\n    const courseCredits = randomStrings[10];//\"credits\";\n        \n    const sectionId = randomStrings[11];//\"scid\";\n    const sectionBuilding = randomStrings[12];//\"building\";\n    const sectionRoom = randomStrings[13];//\"room\";\n    const sectionTime = randomStrings[14];//\"time\";\n    \n    const enrollmentId = randomStrings[15];//\"eid\";\n    const enrollmentSemester = randomStrings[16];//\"semester\";\n    const enrollmentEnrolled = randomStrings[17];//\"enrolled\";\n    const enrollmentGrade = randomStrings2[14];//\"grade\";\n\n    const studentId = randomStrings2[0];//\"sid\";\n    const studentLast = randomStrings2[1];//\"last\";\n    const studentFirst = randomStrings2[2];//\"first\";\n    const studentAddress = randomStrings2[3];//\"address\";\n    const studentGrade = randomStrings2[4];//\"grade\";\n    \n    const zipId = randomStrings2[5];//\"zip\";\n    const zipCity = randomStrings2[6];//\"city\";\n    const zipState = randomStrings2[7];//\"state\";\n    \n    const CS5200 = randomStrings2[8];//\"CS5200\";\n    const Spring2015 = randomStrings2[9];//\"Spring2015\";\n    \n    const studentRename = randomStrings2[10];//\"s\";\n    const sectionRename = randomStrings2[11];//\"s\";\n    const enrollmentRename = randomStrings2[12];//\"e\";\n    const courseRename = randomStrings2[13];//\"c\";\n    \n    return(\n        <div>\n            <h1>UML Group By Multiple Choice</h1>\n            <div id=\"questionABC\">\n                Consider the following UML diagram\n                <br/>\n                <br/>\n\n                <ClassDiagramHorizontal\n                associations={[\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: 1}}\n                        right={{cardinality: \"*\"}}/>,\n                    <AssociationHorizontal\n                        left={{cardinality: \"*\"}}\n                        right={{cardinality: 1}}/>,\n                ]}\n                classes={[\n                    <Clazz clazzName={departmentClass}\n                           fields={[\n                               {name: departmentId, pk: true},\n                               {name: departmentName}\n                           ]}/>,\n                    <Clazz clazzName={courseClass}\n                           fields={[\n                               {name: courseId, pk: true},\n                               {name: courseTitle},\n                               {name: courseCredits},\n                               {name: departmentId, fk: true},\n                           ]}/>,\n                    <Clazz clazzName={sectionClass}\n                           fields={[\n                               {name: sectionId, pk: true},\n                               {name: sectionBuilding},\n                               {name: sectionRoom},\n                               {name: sectionTime},\n                               {name: courseId, fk: true},\n                           ]}/>,\n                    <Clazz clazzName={enrollmentClass}\n                           fields={[\n                               {name: enrollmentId, pk: true},\n                               {name: sectionId, fk: true},\n                               {name: studentId, fk: true},\n                               {name: enrollmentSemester},\n                               {name: enrollmentEnrolled},\n                               {name: enrollmentGrade},\n                           ]}/>,\n                    <Clazz clazzName={studentClass}\n                           fields={[\n                               {name: studentId, pk: true},\n                               {name: studentLast},\n                               {name: studentFirst},\n                               {name: studentAddress},\n                               {name: studentGrade},\n                           ]}/>,\n                ]}\n            />\n            <div style={{clear: \"both\"}}>\n                <br/>\n                Which of the SQL statements below best implements\n                the following query\n                <br/>\n                <br/>\n\n                Which <span style={{textTransform: \"uppercase\"}}>{studentClass}</span>(s) got the highest\n                &nbsp;{studentGrade} for a <span style={{textTransform: \"uppercase\"}}>{courseClass}</span>'s\n                &nbsp;{courseTitle} is \"{CS5200}\" and <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span>'s\n                &nbsp;{enrollmentSemester} is \"{Spring2015}\"?\n                <br/>\n                &nbsp;List the <span style={{textTransform: \"uppercase\"}}>{studentClass}</span>'s primary key,\n                &nbsp;{studentFirst}, {studentLast}, and {studentGrade}\n            </div>\n            </div>\n            <div id=\"answersABC\">\n                <hr/>\n                SELECT {studentRename}.{studentId}, {studentRename}.{studentFirst}, {studentRename}.{studentLast}, {studentRename}.{studentGrade}\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{studentClass}</span> {studentRename}\n                <br/>\n                WHERE {studentRename}.{studentGrade} = (SELECT MAX({enrollmentRename}.{enrollmentGrade})\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span> {enrollmentRename},\n                &nbsp;<span style={{textTransform: \"uppercase\"}}>{sectionClass}</span> {sectionRename},\n                &nbsp;<span style={{textTransform: \"uppercase\"}}>{courseClass}</span> {courseRename}\n                <br/>\n                WHERE {enrollmentRename}.{sectionId} = {sectionRename}.{sectionId}\n                <br/>\n                AND {sectionRename}.{courseId} = {courseRename}.{courseId}\n                <br/>\n                AND {courseRename}.{courseTitle}='{CS5200}'\n                <br/>\n                AND {enrollmentRename}.{enrollmentSemester}='{Spring2015}')\n                \n                <hr/>\n                \n                SELECT {studentRename}.{studentId}, {studentRename}.{studentFirst}, {studentRename}.{studentLast}, {studentRename}.{studentGrade}\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{studentClass}</span> {studentRename}\n                <br/>\n                WHERE {studentRename}.{studentGrade} = (SELECT MAX({enrollmentRename}.{enrollmentGrade})\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span> {enrollmentRename}, <span style={{textTransform: \"uppercase\"}}>{sectionClass}</span> {sectionRename}, <span style={{textTransform: \"uppercase\"}}>{courseClass}</span> {courseRename}\n                <br/>\n                WHERE {enrollmentRename}.{sectionId} = {sectionRename}.{sectionId}\n                <br/>\n                AND {sectionRename}.{courseId} = {courseRename}.{courseId}\n                <br/>\n                AND {courseRename}.{courseTitle}='{CS5200}'\n                <br/>\n                AND {enrollmentRename}.{enrollmentSemester}='{Spring2015}'\n                <br/>\n                GROUP BY {sectionRename}.{sectionId})\n                \n                <hr/>\n                \n                SELECT {studentRename}.{studentId}, {studentRename}.{studentFirst}, {studentRename}.{studentLast}, {studentRename}.{studentGrade}\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{studentClass}</span> {studentRename}\n                <br/>\n                WHERE {studentRename}.{studentGrade} = (SELECT MAX({enrollmentRename}.{enrollmentGrade})\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span> {enrollmentRename}, <span style={{textTransform: \"uppercase\"}}>{sectionClass}</span> {sectionRename}\n                <br/>\n                WHERE {enrollmentRename}.{sectionId} = {sectionRename}.{sectionId}\n                <br/>\n                AND {sectionRename}.{courseId} = <span style={{textTransform: \"uppercase\"}}>{courseClass}</span>.{courseId}\n                <br/>\n                AND <span style={{textTransform: \"uppercase\"}}>{courseClass}</span>.{courseTitle}='{CS5200}'\n                <br/>\n                AND {enrollmentRename}.{enrollmentSemester}='{Spring2015}')\n\n                <hr/>\n                SELECT {studentRename}.{studentId}, {studentRename}.{studentFirst}, {studentRename}.{studentLast}, {studentRename}.{studentGrade}\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{studentClass}</span> {studentRename}\n                <br/>\n                WHERE {studentRename}.{studentGrade} = (SELECT MAX({enrollmentRename}.{enrollmentGrade})\n                <br/>\n                FROM <span style={{textTransform: \"uppercase\"}}>{enrollmentClass}</span> {enrollmentRename}, <span style={{textTransform: \"uppercase\"}}>{courseClass}</span> {courseRename}\n                <br/>\n                WHERE {enrollmentRename}.{sectionId} = <span style={{textTransform: \"uppercase\"}}>{sectionClass}</span>.{sectionId}\n                <br/>\n                AND <span style={{textTransform: \"uppercase\"}}>{sectionClass}</span>.{courseId} = {courseRename}.{courseId}\n                <br/>\n                AND {courseRename}.{courseTitle}='{CS5200}'\n                <br/>\n                AND {enrollmentRename}.{enrollmentSemester}='{Spring2015}')\n\n                <hr/>\n                \n                \n            </div>\n        </div>\n    )\n}\nexport default UmlGroupByMultipleChoice","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/second-normal-form.js",["518","519"],"import React from 'react'\nimport {randomSet, work} from \"../../utils/utils\";\nimport Pk from \"../utils/pk\";\nimport Fk from \"../utils/fk\";\n\nconst SecondNormalForm = () => {\n    const capitalizedStrings = randomSet(10, work, true)\n    const lowercaseStrings = randomSet(10, work)\n    \n    const courseTable = capitalizedStrings[0];//\"CUSTOMERS\";\n    const courseId = lowercaseStrings[0];//\"cid\";\n    const semester = lowercaseStrings[1];//\"first_name\";\n    const seats = lowercaseStrings[2];//\"last_name\";\n    const courseName = lowercaseStrings[3];//\"courseName\";    \n    \n    return(\n        <div>\n            <h1>Second Normal Form</h1>\n            <div id=\"question123\">\n                Consider the following schema with\n                composite primary key <b>{'{'}{courseId}, {semester}{'}'}</b>\n                <br/>\n                and a dependency between fields <b>{courseName}</b> and <b>{courseId}</b>\n                &nbsp;but no dependency between <b>{courseName}</b> and <b>{semester}</b>\n                <br/>\n                <br/>\n                <b>{courseTable}({'{'}{courseId}, {semester}{'}'}, {seats}, {courseName})</b>\n                <br/>\n                <br/>\n                Which normalization is the schema violating?\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                Second normal form\n                <hr/>\n                First normal form\n                <hr/>\n                Third normal form\n                <hr/>\n                The schema does not violate any normal form\n            </div>\n        </div>\n    )\n}\n\nexport default SecondNormalForm","/Users/jannunzi/webdev/quiz-maker/src/db-design/uml/text-to-uml.js",["520"],"import React from 'react'\nimport DiamondShape from \"../utils/diamond-shape\";\nimport AssociationHorizontal from \"../utils/association-horizontal\";\nimport Clazz from \"../utils/clazz\";\nimport ClassDiagramHorizontal from \"../utils/class-diagram-horizontal\";\nimport {education, randomSet, work} from \"../../utils/utils\";\nimport Fk from \"../utils/fk\";\nimport Pk from \"../utils/pk\";\n\nconst TextToUml = () => {\n\n    const uppercase = randomSet(10, work, true)\n    const lowercase = randomSet(10, education)\n    \n    const songs = uppercase[0];//\"SONGS\";\n    const playlists = uppercase[1];//\"PLAYLISTS\";\n\n    const id = lowercase[0];//\"id\";\n    const id2 = lowercase[1];//\"id\";\n    const name = lowercase[2];//\"name\";\n    const name2 = lowercase[3];//\"name\";\n\n    const fields = [\n        {name: id, pk:true},\n        {name: name},\n    ]\n    const fields2 = [\n        {name: id2, pk:true},\n        {name: name2},\n        {name: id, fk:true},\n    ]\n\n    return(\n        <div>\n            <h1>Text to UML</h1>\n            <div id=\"question321\">\n\n                Consider the following schema\n                <br/>\n                <br/>\n                {playlists}(<Pk name={id}/>, {name})\n                <br/>\n                {songs}(<Pk name={id2}/>, {name2}, <Fk name={id}/>)\n                <br/>\n                <br/>\n\n                further consider the following constraint\n                <br/>\n                <br/>\n                \"{songs} can not exist without a corresponding {playlists}\"\n                <br/>\n                <br/>\n                Select the best equivalent UML diagram from the choices listed below\n                <br/>\n                <br/>\n            </div>\n            <div id=\"1\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            left={{cardinality: 1, decoration: \"COMPOSITION\"}}\n                            right={{cardinality: \"*\"}}/>\n                    ]}\n                />\n            </div>\n            \n                <hr style={{clear: \"both\"}}/>\n            <div id=\"2\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            left={{cardinality: 1, decoration: \"AGGREGATION\"}}\n                            right={{cardinality: \"*\"}}/>\n                    ]}\n                />\n            </div>\n                <hr style={{clear: \"both\"}}/>\n            <div id=\"3\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            left={{cardinality: 1, decoration: \"INHERITANCE\"}}\n                            right={{cardinality: \"*\"}}/>\n                    ]}\n                />\n            </div>\n                <hr style={{clear: \"both\"}}/>\n            <div id=\"4\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            left={{cardinality: \"*\"}}\n                            right={{cardinality: \"1\", decoration: \"AGGREGATION\"}}/>\n                    ]}\n                />\n            </div>\n                <hr style={{clear: \"both\"}}/>\n            <div id=\"5\">\n                <ClassDiagramHorizontal\n                    classes={[\n                        <Clazz clazzName={playlists} fields={fields}/>,\n                        <Clazz clazzName={songs} fields={fields2}/>,\n                    ]}\n                    associations={[\n                        <AssociationHorizontal\n                            right={{cardinality: 1, decoration: \"COMPOSITION\"}}\n                            left={{cardinality: \"*\"}}/>\n                    ]}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default TextToUml","/Users/jannunzi/webdev/quiz-maker/src/db-design/relational-algebra/symbol.js",["521"],"import React from 'react'\nimport {randomSet, work, education, randomInt} from \"../../utils/utils\";\n\nconst RelationalAlgebraSymbol = () => {\n    \n    const randomStrings = randomSet(10, work, true)\n    const randomStrings2 = randomSet(10, education, false)\n\n    const student = randomStrings[0]\n    const department = randomStrings[1]\n    \n    const sid = randomStrings2[0]\n    const name = randomStrings2[1]\n    const grad_year = randomStrings2[2]\n    const did = randomStrings2[3]\n    const dname = randomStrings2[3]\n    \n    const year = randomInt(50) + 2020\n    const did10 = randomInt(10) + 10\n    \n    return(\n        <div>\n            <h2>Relational Algebra Symbol</h2>\n            \n            <div id=\"question333\">\n                \n                Consider the following schema:\n                <br/>\n                <br/>\n                <b>\n                {student}({sid}, {name}, {grad_year}, {did})\n                <br/>\n                {department}({did}, {name})\n                </b>\n                <br/>\n                <br/>\n                What does the following expression mean?\n                <br/>\n                <br/>\n                <table style={{fontSize: \"1.5em\"}}>\n                    <tr>\n                        <td>π</td>\n                        <td><sub>{name}</sub></td>\n                        <td>(σ</td>\n                        <td><sub>{did}={did10}^{grad_year}={year}</sub></td>\n                        <td>({student}))</td>\n                    </tr>\n                </table>\n            </div>\n            \n            <div id=\"answers333\">\n                <br/>\n                <br/>\n\n                Retrieve {student}'s {name}s from records in {student}s related to {did}={did10} and {grad_year} is {year}\n                <br/>\n                <br/>\n\n                Retrieve {student}'s {name}s from records in {student}s related to {did}={did10} or {grad_year} is {year}\n                <br/>\n                <br/>\n\n                Retrieve {department}'s {name}s from records in {student}s related to {did}={did10} and {grad_year} is {year}\n                <br/>\n                <br/>\n\n                Retrieve {department}'s {name}s from records in {student}s related to {did}={did10} or {grad_year} is {year}\n                \n                \n            </div>\n        </div>\n    )\n}\n\nexport default RelationalAlgebraSymbol","/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/first-normal-form.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/normalization/third-normal-form.js",["522","523"],"import React from 'react'\nimport {randomSet, work} from \"../../utils/utils\";\nimport Pk from \"../utils/pk\";\nimport Fk from \"../utils/fk\";\n\nconst ThirdNormalForm = () => {\n    const capitalizedStrings = randomSet(10, work, true)\n    const lowercaseStrings = randomSet(10, work)\n    \n    const courseTable = capitalizedStrings[0];//\"CUSTOMERS\";\n    const courseId = lowercaseStrings[0];//\"cid\";\n    const semester = lowercaseStrings[1];//\"first_name\";\n    const seats = lowercaseStrings[2];//\"last_name\";\n    const courseName = lowercaseStrings[3];//\"courseName\";    \n    \n    return(\n        <div>\n            <h1>Third Normal Form</h1>\n            <div id=\"question123\">\n                Consider the following schema with\n                composite primary key <b>{'{'}{courseId}, {semester}{'}'}</b>\n                <br/>\n                and a dependency between fields <b>{courseName}</b> and <b>{seats}</b>\n                <br/>\n                <br/>\n                <b>{courseTable}({'{'}{courseId}, {semester}{'}'}, {seats}, {courseName})</b>\n                <br/>\n                <br/>\n                Which normalization is the schema violating?\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                Third normal form\n                <hr/>\n                Second normal form\n                <hr/>\n                First normal form\n                <hr/>\n                The schema does not violate any normal form\n            </div>\n        </div>\n    )\n}\n\nexport default ThirdNormalForm","/Users/jannunzi/webdev/quiz-maker/src/web-dev/widget-list/widget-list.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/insert/insert-into-columns.js",["524"],"import React from 'react';\nimport {randomData, randomStringCapitalized} from \"../../utils/utils\";\nimport Table from \"../tables/table\";\n\nexport default () => {\n    const randomTableNameA = randomStringCapitalized(2);\n    const schemaA = {\n        schemaName: 'QUIZ_MAKER',\n        tableName: randomTableNameA,\n        columns: [\n            {\n                name: `${randomTableNameA}ID`,\n                type: 'INT',\n                primaryKey: true,\n                autoIncrement: true,\n                notNull: true\n            },\n            {\n                name: `${randomTableNameA}1`,\n                type: 'VARCHAR',\n                size: 45\n            },\n            {\n                name: `${randomTableNameA}2`,\n                type: 'INT'\n            },\n            {\n                name: `${randomTableNameA}3`,\n                type: 'FLOAT'\n            }\n        ]\n    };\n    let tableDataA = randomData({\n        schema: schemaA,\n        rowCount: 3\n    });\n    let tableDataB = randomData({\n        schema: schemaA,\n        rowCount: 1\n    });\n\n    return(\n        <>\n            <h2>DB Design Insert Into Columns</h2>\n            <div>\n            Consider the following table {randomTableNameA}:\n            <br/>\n            <br/>\n            <Table schema={schemaA} tableData={tableDataA}/>\n                Fill in the blanks below to insert a new record that looks like this:\n            <br/>\n            <br/>\n            <Table schema={schemaA} tableData={tableDataB}/>\n                INSERT [INTO] {randomTableNameA}<br/>\n                (\n                [{schemaA.columns[0].name}],\n                [{schemaA.columns[1].name}],\n                [{schemaA.columns[2].name}],\n                [{schemaA.columns[3].name}])<br/>\n                [VALUES]<br/>\n                ([{tableDataB[0][0]}], [{tableDataB[0][1]}], [{tableDataB[0][2]}], [{tableDataB[0][3]}])\n            </div>\n        </>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/relational-algebra/text.js",["525","526"],"import React from 'react'\nimport {randomSet, work, education, randomInt} from \"../../utils/utils\";\n\nconst RelationalAlgebraText = () => {\n    \n    const randomStrings = randomSet(10, work, true)\n    const randomStrings2 = randomSet(10, education, false)\n\n    const student = randomStrings[0]\n    const department = randomStrings[1]\n    \n    const sid = randomStrings2[0]\n    const name = randomStrings2[1]\n    const grad_year = randomStrings2[2]\n    const did = randomStrings2[3]\n    const dname = randomStrings2[3]\n    \n    const year = randomInt(50) + 2020\n    const did10 = randomInt(10) + 10\n    \n    return(\n        <div>\n            <h2>Relational Algebra Text</h2>\n            \n            <div id=\"question333\">\n                \n                Consider the following schema:\n                <br/>\n                <br/>\n                <b>\n                {student}({sid}, {name}, {grad_year}, {did})\n                <br/>\n                {department}({did}, {name})\n                </b>\n                <br/>\n                <br/>\n                What does the following expression mean?\n                <br/>\n                <br/>\n                <b>\n                SELECT(PROJECT({student}, {name}), {did}={did10})\n                </b>\n            </div>\n            \n            <div id=\"answers333\">\n                <br/>\n                <br/>\n\n                The query is meaningless, therefore the query returns nothing\n                <br/>\n                <br/>\n\n                The {name}s of {student}s related to {department} whose {did}={did10}\n                <br/>\n                <br/>\n\n                The {name}s of {student}s concatenated with the {name}s of {department} whose {did}={did10}\n                <br/>\n                <br/>\n\n                The inner PROJECT is meaningless, therefore the query just returns the {department} whose {did}={did10}\n                <br/>\n                <br/>\n\n            </div>\n        </div>\n    )\n}\n\nexport default RelationalAlgebraText","/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/radio.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/add.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/subtract.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/indexing/indexing-create-single-non-unique-index.js",["527","528","529","530","531","532","533","534","535","536","537"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../utils/utils\";\n\nexport const IndexingCreateSingleNonUniqueIndex = () => {\n    const id = randomSet(20, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = id[18];\n    const model = id[17];\n    const field1 = id[0], type1 = 'string';//types[0];\n    const field2 = id[1], type2 = types[1];\n    const field3 = id[2], type3 = types[2];\n    const field4 = id[3], type4 = types[3];\n    const field5 = id[4], type5 = types[4];\n    const field6 = id[5], type6 = types[5];\n    const field7 = id[6], type7 = types[6];\n    const tableA = id[7]\n    const tableB = id[8]\n    const tableC = id[9]\n    const valueStr = id[19];\n    const valueNum = Math.round(Math.random() * 100);\n    const choices = [\n        'CREATE',\n        'INDEX',\n        'ON',\n        tableA,\n        field2,\n    ];\n    return(\n        <div>\n            <h1>Indexing Create Single Non Unique Index</h1>\n            <div id=\"question123\">\n                Fill in the blanks below to complete code the snippet.\n                <br/>\n                Only use lowercase, no quotations, no extra spaces\n                <br/>\n                <br/>\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>\n                {tableA}({field1} (pk), {field2}, {field3}, {field4} (fk))\n                <br/>\n                {tableB}({field4} (pk), {field5}, {field6}, {field7})\n                </b>\n                <br/>\n                <br/>\n                Create an index called <b>MY_INDEX</b> that can improve the performance of the following query\n                <br/>\n                <br/>\n                <b>\n                SELECT * FROM {tableA} WHERE {field2}='{valueStr}'\n                </b>\n                <br/>\n                <br/>\n                <b>\n                <u>____1____</u> <u>____2____</u> MY_INDEX <u>____3____</u> <u>____4____</u> (<u>____5____</u>)\n                </b>\n                <br/>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <ol>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <li>\n                            [{choice}]\n                            </li>\n                        )\n                    })\n                }\n                </ol>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/transactions/transactions-non-repeatable-read.js",["538","539","540","541","542","543","544","545","546","547","548","549"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../utils/utils\";\n\nexport const TransactionsNonRepeatableRead = () => {\n    const id = randomSet(20, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = id[18];\n    const model = id[17];\n    const field1 = id[0], type1 = 'string';//types[0];\n    const field2 = id[1], type2 = 'string';//types[1];\n    const field3 = id[2], type3 = types[2];\n    const field4 = id[3], type4 = types[3];\n    const field5 = id[4], type5 = types[4];\n    const field6 = id[5], type6 = types[5];\n    const field7 = id[6], type7 = types[6];\n    const tableA = id[7]\n    const tableB = id[8]\n    const tableC = id[9]\n    const valueStr1 = id[16];\n    const valueStr2 = id[19];\n    const valueNum1 = Math.round(Math.random() * 100);\n    const valueNum2 = Math.round(Math.random() * 100);\n    const valueNum3 = Math.round(Math.random() * 100);\n    const choices = [\n        'Non Repeatable Read',\n        'Dirty Read',\n        'Read Committed',\n        'Repeatable Read',\n        'Serializable',\n        'Phantom Read',\n    ]\n    return(\n        <div>\n            <h1>Transactions Non Repeatable Reads</h1>\n            <div id=\"question123\">\n\n                <p>Consider the following schema</p>\n                <b>\n                    {tableA}({field1} (pk), {field2}, {field3}, {field4} (fk))\n                    <br/>\n                    {tableB}({field4} (pk), {field5}, {field6}, {field7})\n                </b>\n                <br/>\n                <br/>\n                <p> If the initial value of <b>{field2}</b> for a given record\n                    is <b>{valueNum2}</b>, what would be the risk of the following sequence of events</p>\n                <table border=\"0\">\n                    <tbody>\n                    <tr>\n                        <td align={\"center\"}><b>TRANSACTION 1</b></td>\n                        <td width={50}></td>\n                        <td align={\"center\"}><b>TRANSACTION 2</b></td>\n                    </tr>\n                    <tr>\n                        <td>SELECT {field2} FROM {tableA} WHERE {field3} = {valueNum1};\n                            <br/>-- returns {valueNum2}</td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td>UPDATE {tableA} SET {field2} = {valueNum3} WHERE {field3} = {valueNum1};</td>\n                    </tr>\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td>COMMIT;</td>\n                    </tr>\n                    <tr>\n                        <td>SELECT {field2} FROM {tableA} WHERE {field3} = {valueNum1};\n                            <br/>-- returns {valueNum3}</td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>COMMIT;</td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                    </tbody>\n                </table>\n\n\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <>\n                            <input size={70}\n                                   style={{border: \"none\"}}\n                                   value={choice}/>\n                                   <hr/>\n                           </>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/transactions/transactions-dirty-reads.js",["550","551","552","553","554","555","556","557","558","559","560","561"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../utils/utils\";\n\nexport const TransactionsDirtyRead = () => {\n    const id = randomSet(20, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = id[18];\n    const model = id[17];\n    const field1 = id[0], type1 = 'string';//types[0];\n    const field2 = id[1], type2 = 'string';//types[1];\n    const field3 = id[2], type3 = types[2];\n    const field4 = id[3], type4 = types[3];\n    const field5 = id[4], type5 = types[4];\n    const field6 = id[5], type6 = types[5];\n    const field7 = id[6], type7 = types[6];\n    const tableA = id[7]\n    const tableB = id[8]\n    const tableC = id[9]\n    const valueStr1 = id[16];\n    const valueStr2 = id[19];\n    const valueNum1 = Math.round(Math.random() * 100);\n    const valueNum2 = Math.round(Math.random() * 100);\n    const valueNum3 = Math.round(Math.random() * 100);\n    const choices = [\n        'Dirty Read',\n        'Read Committed',\n        'Repeatable Read',\n        'Serializable',\n        'Phantom Read',\n        'Non Repeatable Read',\n    ]\n    return(\n        <div>\n            <h1>Transactions Dirty Reads</h1>\n            <div id=\"question123\">\n\n                <p>Consider the following schema</p>\n                <b>\n                    {tableA}({field1} (pk), {field2}, {field3}, {field4} (fk))\n                    <br/>\n                    {tableB}({field4} (pk), {field5}, {field6}, {field7})\n                </b>\n                <br/>\n                <br/>\n                <p> If the initial value of <b>{field2}</b> for a given record\n                    is <b>{valueNum2}</b>, what would be the risk of the following sequence of events</p>\n                <table border=\"0\">\n                    <tbody>\n                    <tr>\n                        <td align={\"center\"}><b>TRANSACTION 1</b></td>\n                        <td width={50}></td>\n                        <td align={\"center\"}><b>TRANSACTION 2</b></td>\n                    </tr>\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td>UPDATE {tableA} SET {field2} = {valueNum3} WHERE {field3} = {valueNum1};</td>\n                    </tr>\n                    <tr>\n                        <td>SELECT {field2} FROM {tableA} WHERE {field3} = {valueNum1};\n                            <br/>-- returns {valueNum3}</td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td>ROLLBACK;</td>\n                    </tr>\n                    </tbody>\n                </table>\n\n\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <>\n                            <input size={70}\n                                   style={{border: \"none\"}}\n                                   value={choice}/>\n                                   <hr/>\n                           </>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/indexing/indexing-create-composit-index.js",["562","563","564","565","566","567","568","569","570","571","572","573"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../utils/utils\";\n\nexport const IndexingCreateCompositeIndex = () => {\n    const id = randomSet(20, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = id[18];\n    const model = id[17];\n    const field1 = id[0], type1 = 'string';//types[0];\n    const field2 = id[1], type2 = 'string';//types[1];\n    const field3 = id[2], type3 = types[2];\n    const field4 = id[3], type4 = types[3];\n    const field5 = id[4], type5 = types[4];\n    const field6 = id[5], type6 = types[5];\n    const field7 = id[6], type7 = types[6];\n    const tableA = id[7]\n    const tableB = id[8]\n    const tableC = id[9]\n    const valueStr1 = id[16];\n    const valueStr2 = id[19];\n    const valueNum = Math.round(Math.random() * 100);\n    const choices = [\n        'CREATE',\n        'INDEX',\n        'ON',\n        tableA,\n        field2,\n        field3,\n    ];\n    return(\n        <div>\n            <h1>Indexing Create Composite Index</h1>\n            <div id=\"question123\">\n                Fill in the blanks below to complete code the snippet.\n                <br/>\n                Only use lowercase, no quotations, no extra spaces\n                <br/>\n                <br/>\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>\n                {tableA}({field1} (pk), {field2}, {field3}, {field4} (fk))\n                <br/>\n                {tableB}({field4} (pk), {field5}, {field6}, {field7})\n                </b>\n                <br/>\n                <br/>\n                Create an index called <b>MY_INDEX</b> that can improve the performance of the following query\n                <br/>\n                <br/>\n                <b>\n                SELECT * FROM {tableA} WHERE {field2}= '{valueStr1}' AND {field3} = '{valueStr1}'\n                </b>\n                <br/>\n                <br/>\n                <b>\n                <u>____1____</u> <u>____2____</u> MY_INDEX <u>____3____</u> <u>____4____</u> (<u>____5____</u>, <u>____6____</u>)\n                </b>\n                <br/>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <ol>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <li>\n                            [{choice}]\n                            </li>\n                        )\n                    })\n                }\n                </ol>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-min-max-choice.js",["574","575","576","577"],"import React from 'react'\nimport {randomArray, randomData, randomFruitSet, randomSet, randomStringCapitalized, fruits} from \"../../../../utils/utils\";\n\nconst GroupByTwoTablesMultipleMinMaxChoice = () => {\n    \n    const array = randomArray()\n    const randomFruits = randomSet(9, array)\n    const tableA = randomFruits[0];\n    const tableApk = randomFruits[1];\n    const tableAfield1 = randomFruits[2];\n    const tableAfield2 = randomFruits[3];\n\n    const tableB = randomFruits[4];\n    const tableBpk = randomFruits[5];\n    const tableBfield1 = randomFruits[6];\n\n    const tableArename = randomFruits[7];\n    const tableBrename = randomFruits[8];\n    return(\n        <>\n            <h3>Group By Two Tables Min Max Multiple Choice</h3>\n            <p>\n            Consider the following schema:\n                <br/>\n                <br/>\n                {tableA}(<b>{tableApk}</b> (pk), {tableAfield1}, {tableAfield2})\n                <br/>\n                {tableB}(<b>{tableBpk}</b> (pk), {tableBfield1}, <u><i>{tableApk}</i></u> (fk))\n                <br/>\n                <br/>\n            Select the statement that best implements the following query\n                <br/>\n                <br/>\n                <b>\"What are min and max {tableAfield1}, per {tableApk}\"</b>\n            </p>\n            <input type=\"radio\" checked={true}/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, MIN({tableArename}.{tableAfield1}), MAX({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, {tableArename}.{tableAfield1}, MIN({tableArename}.{tableAfield1}), MAX({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n            <br/>\n                SELECT {tableArename}.{tableApk}, MIN({tableArename}.{tableAfield1}), MAX({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableB} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, {tableBrename}.{tableBfield1} MIN({tableArename}.{tableAfield1}), MAX({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}, {tableB} {tableBrename}\n                <br/>\n                WHERE {tableArename}.{tableApk} = {tableBrename}.{tableApk}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n        </>\n    )\n}\n\nexport default GroupByTwoTablesMultipleMinMaxChoice","/Users/jannunzi/webdev/quiz-maker/src/db-design/inline-views/true-false/inline-view-legal-true-false.js",["578","579","580","581","582","583"],"import React from 'react'\nimport {\n    randomArray,\n    randomData,\n    randomFruitSet,\n    randomSet,\n    randomStringCapitalized,\n    fruits, work,\n    education, aggregationFunctions\n} from \"../../../utils/utils\";\nimport {Link} from \"react-router-dom\";\nimport Pk from \"../../utils/pk\"\nimport Fk from \"../../utils/fk\"\n\nconst InlineViewLegalTrueFalse = () => {\n    // const array = randomArray();\n    const randomStrings = randomSet(10, work);\n    const studentTable = randomStrings[0];\n    const studentId = randomStrings[1];\n    const studentName = randomStrings[2];\n\n    const sectionTable = randomStrings[3];\n    const sectionId = randomStrings[4];\n    const sectionName = randomStrings[5];\n\n    const enrollmentTable = randomStrings[6];\n    const enrollmentId = randomStrings[7];\n    const enrollmentGrade = randomStrings[8];\n    \n    const randomStrings2 = randomSet(9, education);\n    const viewName = randomStrings2[0];\n    const enrollmentTableRename = randomStrings2[1];\n    const aggregationRename = randomStrings2[2];\n    const gradeValue = randomStrings2[3];\n    \n    const randomAggregations = randomSet(2, aggregationFunctions);\n    const aggregation1 = randomAggregations[0];\n    const aggregation2 = randomAggregations[1];\n\n    return(\n        <>\n            <h3>Inline Views Legal True False</h3>\n            <p>\n            Consider the following schema:\n                <br/>\n                <br/>\n                {studentTable}(<Pk name={studentId}/>, {studentName})\n                <br/>\n                {sectionTable}(<Pk name={sectionId}/>, {sectionName})\n                <br/>\n                {enrollmentTable}(<Pk name={enrollmentId}/>, <Fk name={studentId}/>, <Fk name={sectionId}/>, {enrollmentGrade})\n                <br/>\n                <br/>\n                Is the following query legal?\n                <br/>\n                <br/>\n                SELECT {viewName}.scid\n                <br/>\n                FROM\n                <div style={{marginLeft: \"20px\"}}>\n                    (SELECT {enrollmentTableRename}.{sectionId}, {aggregation1}({enrollmentTableRename}.{enrollmentId}) as {aggregationRename}\n                    <br/>\n                    FROM {enrollmentTable} {enrollmentTableRename}\n                    <br/>\n                    WHERE {enrollmentTableRename}.{enrollmentGrade} = '{gradeValue}'\n                    <br/>\n                    GROUP BY {enrollmentTableRename}.{sectionId}) {viewName}\n                </div>\n                WHERE {viewName}.{aggregationRename} = {aggregation2}({viewName}.{aggregationRename})\n                <br/>\n            </p>\n        </>\n    )\n}\n\nexport default InlineViewLegalTrueFalse\n// 265641","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/two-tables/multiple-choice/group-by-two-tables-multiple-count-choice.js",["584","585","586","587"],"import React from 'react'\nimport {randomArray, randomData, randomFruitSet, randomSet, randomStringCapitalized, fruits} from \"../../../../utils/utils\";\n\nconst GroupByTwoTablesMultipleCountChoice = () => {\n    \n    const array = randomArray()\n    const randomFruits = randomSet(9, array)\n    const tableA = randomFruits[0];\n    const tableApk = randomFruits[1];\n    const tableAfield1 = randomFruits[2];\n    const tableAfield2 = randomFruits[3];\n\n    const tableB = randomFruits[4];\n    const tableBpk = randomFruits[5];\n    const tableBfield1 = randomFruits[6];\n\n    const tableArename = randomFruits[7];\n    const tableBrename = randomFruits[8];\n    return(\n        <>\n            <h3>Group By Two Tables Count Multiple Choice</h3>\n            <p>\n            Consider the following schema:\n                <br/>\n                <br/>\n                {tableA}(<b>{tableApk}</b> (pk), {tableAfield1}, {tableAfield2})\n                <br/>\n                {tableB}(<b>{tableBpk}</b> (pk), {tableBfield1}, <u><i>{tableApk}</i></u> (fk))\n                <br/>\n                <br/>\n            Select the statement that best implements the following query\n                <br/>\n                <br/>\n                <b>\"How many {tableAfield1}, per {tableApk}\"</b>\n            </p>\n            <input type=\"radio\" checked={true}/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, COUNT({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, {tableArename}.{tableAfield1}, COUNT({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n            <br/>\n                SELECT {tableArename}.{tableApk}, COUNT({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableB} {tableArename}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n            <input type=\"radio\"/>\n                <br/>\n                SELECT {tableArename}.{tableApk}, {tableBrename}.{tableBfield1} COUNT({tableArename}.{tableAfield1})\n                <br/>\n                FROM {tableA} {tableArename}, {tableB} {tableBrename}\n                <br/>\n                WHERE {tableArename}.{tableApk} = {tableBrename}.{tableApk}\n                <br/>\n                GROUP BY {tableArename}.{tableApk}\n                <br/>\n                <br/>\n        </>\n    )\n}\n\nexport default GroupByTwoTablesMultipleCountChoice","/Users/jannunzi/webdev/quiz-maker/src/db-design/group-by/single-table/multiple-choice/group-by-single-table-multiple-choice.js",["588","589","590","591"],"import React from 'react'\nimport {randomArray, randomData, randomFruitSet, randomSet, randomStringCapitalized, fruits} from \"../../../../utils/utils\";\n\nconst GroupBySingleTableMultipleChoice = () => {\n    const array = randomArray()\n    const randomFruits = randomSet(5, array)\n    console.log(randomFruits)\n    const randomTableNameA = randomFruits[0];//randomStringCapitalized(2);\n    const randomFieldA = randomFruits[1];//randomStringCapitalized(4);\n    const randomFieldB = randomFruits[2];//randomStringCapitalized(4);\n    const randomFieldC = randomFruits[3];//randomStringCapitalized(4);\n    const randomFieldD = randomFruits[4];//randomStringCapitalized(4);\n    return(\n        <>\n            <h3>Group By Single Table Multiple Choice</h3>\n            <p>\n            Consider the following schema:\n                <br/>\n                <br/>\n                <b>{randomTableNameA}({randomFieldA}, {randomFieldB}, {randomFieldC}, {randomFieldD})</b>\n                <br/>\n                <br/>\n            Select the statement that best implements the following query\n                <br/>\n                <br/>\n                <b>\"The sum of all {randomFieldB} per {randomFieldD}\"</b>\n            </p>\n            <br/>\n            <input type=\"radio\"/>\n            <br/>\n            SELECT {randomFieldD}, SUM({randomFieldB})\n            &nbsp;FROM {randomTableNameA}\n            &nbsp;GROUP BY {randomFieldD}\n            <br/>\n            <br/>\n            <input type=\"radio\"/>\n            <br/>\n            SELECT {randomFieldD}, SUM({randomFieldD})\n            &nbsp;FROM {randomTableNameA}\n            &nbsp;GROUP BY {randomFieldB}\n            <br/>\n            <br/>\n            <input type=\"radio\"/>\n            <br/>\n            SELECT {randomFieldA}, {randomFieldD}, SUM({randomFieldB})\n            &nbsp;FROM {randomTableNameA}\n            &nbsp;GROUP BY {randomFieldD}\n            <br/>\n            <br/>\n            <input type=\"radio\"/>\n            <br/>\n            SELECT {randomFieldA}, {randomFieldD}, SUM({randomFieldD})\n            &nbsp;FROM {randomTableNameA}\n            &nbsp;GROUP BY {randomFieldB}\n            <br/>\n            <br/>\n        </>\n    )\n}\n\nexport default GroupBySingleTableMultipleChoice","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/spreader/spreader-object.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/class/state-class-prev-state.js",["592","593","594"],"import React from 'react'\nimport {randomArrayOfStrings, randomInt} from \"../../../../utils/utils\";\n\nconst StateClassPrevState = () => {\n    const strings = randomArrayOfStrings()\n    const caps = randomArrayOfStrings(2, 20, true)\n    const ten = randomInt(50, 10)\n    return (\n        <div>\n            <h2>State Class Prev State</h2>\n            <Question Answer={caps[0]} count={strings[1]} ten={ten}\n                      ewq={strings[2]} rew={strings[3]} tre={strings[4]} \n                      prevState={strings[5]}\n                      A={caps[6]} B={caps[7]} C={caps[8]}/>\n            <Answer ten={ten} A={caps[6]} B={caps[7]} C={caps[8]}/>\n        </div>)\n}\n\nexport default StateClassPrevState\n\nconst Question = (\n    {\n        Answer=\"Answer\", count=\"count\", ten=10, ewq=\"ewq\", rew=\"rew\", tre=\"tre\",\n        prevState=\"prevState\", A=\"A\", B=\"B\", C=\"C\"\n    }) => {\n    const code = `\nclass ${Answer} extends React.Component {\n    state = {\n        ${count}: ${ten}\n    }\n    ${ewq} = () => this.state.${count} = this.state.${count}++\n    ${rew} = () => this.setState({\n        ${count}: ++this.state.${count}\n    })\n    ${tre} = () => this.setState(${prevState} => ({\n        ${count}: ++${prevState}.${count}\n    }))\n    render() {\n        return(\n            <div>\n                <h1>{this.state.${count}}</h1>\n                <button onClick={this.${ewq}}>${A}</button>\n                <button onClick={this.${rew}}>${B}</button>\n                <button onClick={this.${tre}}>${C}</button>\n            </div>\n        )\n    }\n}`\n    return (<div>\n        Consider the following code snippet:\n        <pre>\n            {code}\n        </pre>\n\n        What does {`<h1>`} render when component {Answer} first mounts? [ANSWER_{ten}]\n        <br/>\n        What does {`<h1>`} render when you then click button {B}? [ANSWER_{ten + 1}]\n        <br/>\n        What does {`<h1>`} render when you then click button {C}? [ANSWER_{ten + 2}]\n        <br/>\n        Which is a better implementation, function <code>{rew}</code> or function <code>{tre}</code>? [ANSWER_{tre}]\n        <br/>\n    </div>)\n    }    \n\nclass Answer extends React.Component {\n    state = {\n        count: this.props.ten\n    }\n    ewq = () => this.state.count = this.state.count++\n    rew = () => this.setState({\n        count: ++this.state.count\n    })\n    tre = () => this.setState(prevState => ({\n        count: ++prevState.count\n    }))\n    render() {\n        return(\n            <div>\n                <h1>{this.state.count}</h1>\n                <button onClick={this.ewq}>{this.props.A}</button>\n                <button onClick={this.rew}>{this.props.B}</button>\n                <button onClick={this.tre}>{this.props.C}</button>\n            </div>\n        )\n    }\n}","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/class/state1.js",["595","596","597","598","599"],"import React from 'react'\nimport {randomArray, randomString, randomSet, fruits, randomInt, work} from \"../../../../utils/utils\";\n\nconst State1 = () => {\n    // const a = randomString(3);\n    // const a = randomString(3);\n    // const a = randomString(3);\n    // const a = randomString(3);\n    // const a = randomString(3);\n    const randomString = randomSet(10, fruits, false);\n    const a = randomString[0]\n    const b = randomString[1]\n    const c = randomString[2]\n    const d = randomString[3]\n    const e = randomString[4]\n    const f = randomInt(10);\n    const g = randomInt(10);\n    \n    const randomCapitalized = randomSet(10, work, true)\n    const D = randomCapitalized[0];\n    const E = randomCapitalized[1];\n    const Toggle = randomCapitalized[2];\n    \n    return(\n        <div>\n            <h1>Class State</h1>\n            Consider the following code snippet\n            <br/>\n            <ToggleStr Toggle={Toggle} a={a} b={b} c={c} D={D} E={E} f={f} g={g}/>\n            What is displayed in {`<h1>`} when the component first renders: {'[ZERO]'}\n            <br/>\n            What is displayed in {`<h1>`} when you click on {D}: {'[ONE]'}\n            <br/>\n            What is displayed in {`<h1>`} when you click on {E}: {'[ZERO1]'}\n            <Toggle123 f={f} g={g} D={D} E={E}/>\n        </div>\n    )\n}\n\nexport default State1\n\nconst ToggleStr = ({Toggle, a, b, c, D, E, f, g}) => {\n    return(\n        <pre>\n{`\nclass ${Toggle} extends React.Component {\n  state = {\n    ${a}: 0\n  }\n  render() {\n    return(\n      <div>\n        <h1>{this.state.${a}}</h1>\n        {this.state.${a} % ${f} === 0 &&\n          <button onClick={() => this.setState((${b}) => ({${a}: ++${b}.${a}}))}>\n            ${D}\n          </button>}\n        {this.state.${a} % ${g} !== 0 &&\n          <button onClick={() => this.setState((${c}) => ({${a}: --${c}.${a}}))}>\n            ${E}\n          </button>}\n      </div>\n    )\n  }\n}`}</pre>\n    )\n}\n\nclass Toggle123 extends React.Component {\n    state = {\n        a: 0\n    }\n    render() {\n        return(\n            <div>\n                <h1>{this.state.a}</h1>\n                {this.state.a % this.props.f === 0 && <button onClick={() => this.setState((b) => ({a: ++b.a}))}>{this.props.D}</button>}\n                {this.state.a % this.props.g !== 0 && <button onClick={() => this.setState((c) => ({a: --c.a}))}>{this.props.E}</button>}\n                <br/>\n                {this.props.f}\n                <br/>\n                {this.props.g}\n            </div>\n        )\n    }\n}\n\nconst Correct = () =>\n    <div>\n        Consider the following coded snippet:\n        {'export default class A extends {'}\n    </div>","/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/spreader/spreader-array.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/class/props.js",["600"],"import React from 'react'\nimport {randomArrayOfStrings} from \"../../../utils/utils\";\n\nconst ReactClassProps = () => {\n    const strings = randomArrayOfStrings()\n    const caps = randomArrayOfStrings(2, 20, true)\n    return(\n        <div>\n            <h1>React Class Props Syntax</h1>\n            <Question\n                A={caps[0]} B={caps[1]} C={caps[2]} D={caps[3]}\n                messageAtr={strings[0]} HelloWorld={caps[4]}/>\n        </div>\n    )\n}\n\nexport default ReactClassProps\n\nconst Question = (\n    {\n        A=\"A\", B=\"B\", C=\"C\", D=\"D\",\n        messageAtr = \"message\", HelloWorld = \"Hello World\"\n    }) => {\n    return(\n        <div>\n            Consider the following code snippet:\n            <pre>\n                {`\nconst Answer = () =>\n    <div>\n        <${A} ${messageAtr}=\"${HelloWorld}\"/>\n        <${B} ${messageAtr}=\"${HelloWorld}\"/>\n        <${C} ${messageAtr}=\"${HelloWorld}\"/>\n        <${D} ${messageAtr}=\"${HelloWorld}\"/>\n    </div>\n`}</pre>\n\n            Which of the following implementations for <code>{A}</code>, <code>{B}</code>, <code>{C}</code>, and <code>{D}</code> displays \"{HelloWorld}\"?\n            Select all that apply\n<hr/>\n\n            <input type=\"checkbox\" checked={true}/>\n<pre>{`\nclass ${A}\n    extends React.Component {\n    render() {\n        return(\n            <h1>{this.props.${messageAtr}}</h1>\n        )\n    }\n}`}\n</pre>\n<input type=\"checkbox\" checked={true}/>\n<pre>{`\nconst ${B} = ({${messageAtr}}) =>\n    <h1>{${messageAtr}}</h1>\n`}</pre>\n<input type=\"checkbox\"/>\n<pre>{`\nconst ${C} = ({${messageAtr}}) =>\n    <h1>{this.props.${messageAtr}}</h1>\n`}</pre>\n<input type=\"checkbox\"/>\n<pre>{`\nclass ${D}\n    extends React.Component {\n    render({${messageAtr}}) {\n        return(\n            <h1>{${messageAtr}}</h1>\n        )\n    }\n}`}\n            </pre>\n        </div>\n    )\n}\n\nconst Answer = () =>\n    <div>\n        <A message=\"Hello World\"/>\n        <B message=\"Hello World\"/>\n        <C message=\"Hello World\"/>\n        <D message=\"Hello World\"/>\n    </div>\n\nclass A\n    extends React.Component {\n    render() {\n        return(\n            <h1>{this.props.message}</h1>\n        )\n    }\n}\n\nconst B = ({message}) =>\n    <h1>{message}</h1>\n\nconst C = ({message}) =>\n    <h1>{this.props.message}</h1>\n\nclass D\n    extends React.Component {\n    render({message}) {\n        return(\n            <h1>{message}</h1>\n        )\n    }\n}\n","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/function/return/return.js",["601","602","603"],"import React from 'react'\nimport {randomArrayOfStrings} from \"../../../../utils/utils\";\nimport {Link} from \"react-router-dom\";\n\nconst ReactFunctionReturn = () => {\n    const strings = randomArrayOfStrings()\n    const caps = randomArrayOfStrings(2, 20, true)\n    return(\n        <div>\n            <h1>React Function Return</h1>\n            <Question f={caps[2]} HelloWorld={caps[4]}/>\n        </div>\n    )\n}\n\nexport default ReactFunctionReturn\n\nconst Question = (\n    {\n        f=\"f\",\n        HelloWorld = \"Hello World\"\n    }) => {\n    return(\n        <div>\n            Which of the following implementations displays {`<h1>`}{HelloWorld}{`</h1>`}?\n            Select all that apply\n<hr/>\n\n            <input type=\"checkbox\" checked={true}/>\n<pre>{`\nconst ${f} = () =>\n    <h1>${HelloWorld}</h1>\n`}\n</pre>\n<input type=\"checkbox\" checked={true}/>\n<pre>{`\nfunction ${f}() {\n    return(<h1>${HelloWorld}</h1>)\n}\n`}</pre>\n            <input type=\"checkbox\" checked={true}/>\n<pre>{`\nconst ${f} = () => {\n    return(<h1>${HelloWorld}</h1>)\n}\n`}</pre>\n            <input type=\"checkbox\" checked={true}/>\n<pre>{`\nclass ${f} extends React.Component {\n    render() {\n        return(\n            <h1>${HelloWorld}</h1>\n        )\n    }\n}`}\n            </pre>\n        </div>\n    )\n}\n\nconst Answer = () =>\n    <div>\n        <A message=\"Hello World\"/>\n        <B message=\"Hello World\"/>\n        <C message=\"Hello World\"/>\n        <D message=\"Hello World\"/>\n    </div>\n\nclass A\n    extends React.Component {\n    render() {\n        return(\n            <h1>{this.props.message}</h1>\n        )\n    }\n}\n\nconst B = ({message}) =>\n    <h1>{message}</h1>\n\nconst C = ({message}) =>\n    <h1>{this.props.message}</h1>\n\nclass D\n    extends React.Component {\n    render({message}) {\n        return(\n            <h1>{message}</h1>\n        )\n    }\n}\n","/Users/jannunzi/webdev/quiz-maker/src/web-dev/web-dev.js",["604"],"import React from 'react'\nimport {Link, Route} from \"react-router-dom\";\nimport Map1 from \"./es6/map/map1\";\nimport Filter from \"./es6/filter/filter\";\nimport LabelsForInput from \"./html/labels-for-input\";\nimport LabelsAndRadios from \"./html/labels-and-radios\";\nimport Placeholder from \"./html/placeholder\";\nimport Title from \"./html/title\";\nimport Value from \"./html/value\";\nimport Textarea from \"./html/textarea\";\nimport ColorAndBgColor from \"./css/color-and-bg-color\";\nimport RoutingNavigation from \"./routing/routing-navigation\";\nimport Nav1 from \"./routing/nav1\";\n\nconst WebDevelopment = () => {\n  return (\n    <>\n      <h2>Web Development</h2>\n        <h3>React</h3>\n        <div>\n            <Nav1/>\n\n            <LabelsForInput/>\n\n            <Link to=\"/web-dev/react/context/example1/redux\"\n                  className=\"list-group-item\">\n                Redux\n            </Link>\n            <Link to=\"/web-dev/react/context/example1/prop-drill/classes\"\n                  className=\"list-group-item\">\n                Property Drilling Class Components\n            </Link>\n            <Link to=\"/web-dev/react/context/example1/prop-drill\"\n                  className=\"list-group-item\">\n                Property Drilling Functional Components\n            </Link>\n            <Link to=\"/web-dev/react/context\" className=\"list-group-item\">\n                React Context\n            </Link>\n            <Link to=\"/web-dev/react/function/return\" className=\"list-group-item\">\n                React Function Return\n            </Link>\n            <Link to=\"/web-dev/react/class/props\" className=\"list-group-item\">\n                React Class Props Syntax\n            </Link>\n        </div>\n        <h3>Spreader</h3>\n        <div>\n            <Link to=\"/web-dev/es6/spreader/array\" className=\"list-group-item\">\n                Spreader Array\n            </Link>\n            <Link to=\"/web-dev/es6/spreader/object\" className=\"list-group-item\">\n                Spreader Object\n            </Link>\n        </div>\n        <h3>State</h3>\n        <div>\n            <Link to=\"/web-dev/react/state/class/prev-state\" className=\"list-group-item\">\n                State Class Prev State\n            </Link>\n            <Link to=\"/web-dev/react/state/redux\" className=\"list-group-item\">\n                State Redux Counter\n            </Link>\n            <Link to=\"/web-dev/react/state/class\" className=\"list-group-item\">\n                Class Set State\n            </Link>\n            <Link to=\"/web-dev/react/function/use-state\" className=\"list-group-item\">\n                React Functional Component useState\n            </Link>\n        </div>\n        <h3>HTML</h3>\n        <div>\n            <Link to=\"/web-dev/html/radio\" className=\"list-group-item\">\n                Radio buttons\n            </Link>\n        </div>\n\n        <h3>WhiteBoard</h3>\n        <div>\n            <Link to=\"/web-dev/widget-list\" className=\"list-group-item\">\n                Widget List\n            </Link>\n        </div>\n\n        <RoutingNavigation/>\n\n        <ColorAndBgColor/>\n\n        <Textarea/>\n\n        <Value/>\n\n        <Title/>\n\n        <Placeholder/>\n\n        <LabelsAndRadios/>\n        \n        <Filter/>\n        <h3>Map</h3>\n        <Map1/>\n    </>\n  )\n}\n\nexport default WebDevelopment\n","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/function/use-state/t.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/redux/state-redux.js",["605"],"import React from 'react'\nimport {Provider, connect} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport Counter from \"./counter\"\nimport {randomArrayOfStrings, randomInt} from \"../../../../utils/utils\"\n\nconst initialCount = randomInt(10)\nconst increment = randomInt(10)\nconst decrement = randomInt(10)\n\nconst StateRedux = () => {\n    const strings = randomArrayOfStrings()\n    const stringsCapitalized = randomArrayOfStrings(2, 20, true)\n    const incrementButton = stringsCapitalized[0]\n    const decrementButton = stringsCapitalized[1]\n    const counterContainerStr = stringsCapitalized[2]\n    return(\n        <div>\n            <h2>State Redux Plus 2 Minus 3 </h2>\n            Consider the following code snippet:\n            <CounterContainerStr\n                reducer={strings[0]}\n                stateInReducer={strings[2]}\n                count={strings[1]}\n                stateProperty={strings[3]}\n                PLUS_TWO={strings[5]}\n                MINUS_THREE={strings[4]}\n                plus2={strings[5]}\n                minus3={strings[6]}\n                initialCount={initialCount}\n                increment={increment}\n                decrement={decrement}\n                incrementButton={incrementButton}\n                decrementButton={decrementButton}\n                CounterContainer={counterContainerStr}\n                Counter={stringsCapitalized[3]}\n                stpmState={strings[7]}\n                dtpmDispatch={strings[8]}\n                action={strings[9]}\n            />\n            <br/>\n            What does {`<h1>`} display when the component {counterContainerStr} first renders: {`[INITIALCOUNT_${initialCount}]`}\n            <br/>\n            What does {`<h1>`} display if you then press button {incrementButton}: {`[AFTERINCREMENT_${initialCount + increment}]`}\n            <br/>\n            What does {`<h1>`} display if you then press button {decrementButton}: {`[AFTERDECREMENT_${initialCount + increment - decrement}]`}\n            <br/>\n\n            <CounterContainer\n                incrementButton={incrementButton}\n                decrementButton={decrementButton}/>\n        </div>\n    )\n}\n\nconst CounterContainerStr = (\n    {\n        reducer=\"reducer\",\n        stateInReducer=\"state\",\n        count=\"count\",\n        stateProperty=\"count\",\n        PLUS_TWO=\"PLUS_TWO\",\n        MINUS_THREE=\"MINUS_THREE\",\n        plus2=\"plus2\",\n        minus3=\"minus3\",\n        initialCount=0,\n        increment=2,\n        decrement=3,\n        incrementButton,\n        decrementButton,\n        Counter=\"Counter\",\n        CounterContainer=\"CounterContainer\",\n        stpmState=\"state\",\n        dtpmDispatch=\"dispatch\",\n        action=\"action\"\n    }) =>\n    <div>\n\n        <pre>\n{`\nconst ${reducer} = (${stateInReducer} = {${count}: ${initialCount}, ${action}) => {\n    switch(${action}.type) {\n        case \"${PLUS_TWO}\":\n            return {\n                ${count}: ${stateInReducer}.${count} + ${increment}\n            }\n        case \"${MINUS_THREE}\":\n            return {\n                ${count}: ${stateInReducer}.${count} - ${decrement}\n            }\n        default:\n            return ${stateInReducer}\n    }\n}`}\n        </pre>\n        <pre>\n{`const store = createStore(${reducer})\n\nconst ${CounterContainer} = () =>\n    <Provider store={store}>\n        <${Counter}/>\n    </Provider>\n`}\n        </pre>\n        <pre>\n{`\nconst ${Counter} = ({${plus2}, ${minus3}, ${stateProperty}}) =>\n    <div>\n        <h1>{${stateProperty}}</h1>\n        <button onClick={${plus2}}>${incrementButton}</button>\n        <button onClick={${minus3}}>${decrementButton}</button>\n    </div>\n\nconst stpm = (${stpmState}) => ({${stateProperty}: ${stpmState}.${count}})\nconst dtpm = (${dtpmDispatch}) => ({\n    ${plus2}: () => ${dtpmDispatch}({type: \"${PLUS_TWO}\"}),\n    ${minus3}: () => ${dtpmDispatch}({type: \"${MINUS_THREE}\"}),\n})\nexport default connect(stpm, dtpm)(${Counter})\n`}\n        </pre>\n    </div>\n\nconst reducer = (state = {count: initialCount}, action) => {\n    switch(action.type) {\n        case \"PLUS_TWO\":\n            return {\n                count: state.count + increment\n            }\n        case \"MINUS_THREE\":\n            return {\n                count: state.count - decrement\n            }\n        default:\n            return state\n    }\n}\n\nconst store = createStore(reducer)\n\nconst CounterContainer = ({incrementButton, decrementButton}) =>\n    <Provider store={store}>\n        <Counter incrementButton={incrementButton} decrementButton={decrementButton}/>\n    </Provider>\n\nexport default StateRedux","/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-group-by-count-fill-blanks.js",["606","607","608","609"],"import React from 'react'\nimport CreateTableSql from \"../../../sql/create-table\";\nimport InsertRandomRowsSql from \"../../../sql/insert-random-rows\";\nimport Table from \"../../../tables/table\";\nimport {randomStringCapitalized, randomInt, randomData, join, groupByCount} from \"../../../../utils/utils\";\n\nconst DbDesignQueryGroupByCountFillBlanks = () => {\n  const randomTableNameA = randomStringCapitalized(2);\n  const randomTableNameB = randomStringCapitalized(2);\n\n  const randomRenameA = randomStringCapitalized(2);\n  const randomRenameB = randomStringCapitalized(2);\n  const randomRenamea = randomStringCapitalized(2);\n  const randomRenameb = randomStringCapitalized(2);\n\n  const schemaA = {\n    schemaName: 'QUIZ_MAKER',\n    tableName: randomTableNameA,\n    rowColors: [\"#bbffbb\",\"#bbbbff\", \"#ffbbbb\"],\n    columns: [\n      {\n        name: `${randomTableNameA}ID`,\n        type: 'INT',\n        primaryKey: true,\n        autoIncrement: true,\n        notNull: true\n      },\n      {\n        name: `${randomTableNameA}1`,\n        type: 'VARCHAR',\n        size: 45\n      },\n      {\n        name: `${randomTableNameA}2`,\n        type: 'INT'\n      },\n      {\n        name: `${randomTableNameA}3`,\n        type: 'FLOAT'\n      }\n    ]\n  }\n  const schemaB = {\n    schemaName: 'QUIZ_MAKER',\n    tableName: randomTableNameB,\n    rowColors: [\"#bbffbb\",\"#bbbbff\",\"#bbbbff\",\"#ffbbbb\",\"#ffbbbb\",\"#ffbbbb\"],\n    columns: [\n      {\n        name: `${randomTableNameB}ID`,\n        type: 'INT',\n        primaryKey: true,\n        autoIncrement: true,\n        notNull: true\n      },\n      {\n        name: `${randomTableNameB}1`,\n        type: 'VARCHAR',\n        size: 45\n      },\n      {\n        name: `${randomTableNameB}2`,\n        type: 'INT'\n      },\n      {\n        name: `${randomTableNameB}3`,\n        type: 'FLOAT'\n      },\n      {\n        name: `${randomTableNameA}ID`,\n        type: 'INT',\n        foreignKey: true,\n        referencesTable: randomTableNameA,\n        referencesField: `${randomTableNameA}ID`\n      }\n    ]\n  }\n  const randomPk1 = randomInt(1000)\n  const randomPk2 = randomInt(1000)\n  const randomPk3 = randomInt(1000)\n  const randomPk4 = randomInt(1000)\n  const randomPk5 = randomInt(1000)\n  let values = {}\n  values[`${randomTableNameA}ID`] = [randomPk1, randomPk2, randomPk3, randomPk4, randomPk5, randomInt(1000),randomInt(1000)]\n  let tableDataA = randomData({\n    schema: schemaA,\n    values,\n    rowCount: 7\n  })\n  values = {}\n  values[`${randomTableNameA}ID`] = [randomPk1, randomPk2, randomPk2, randomPk3, randomPk3, randomPk3, randomInt(1000)]\n  const rowColors = [\"#bbffbb\",\"#bbbbff\", \"#ffbbbb\"]\n  let tableDataB = randomData({\n    schema: schemaB,\n    values,\n    rowCount: 7\n  })\n  const group = groupByCount({\n    tableA: {data: tableDataA, schema: schemaA},\n    tableB: {data: tableDataB, schema: schemaB},\n    groupByField: `${randomTableNameA}ID`,\n    renameA: randomRenameA,\n    renameB: randomRenameB\n  })\n  // console.log(group)\n  return (\n    <>\n      <h2>DB Design Query Group By Count Fill Blanks</h2>\n      <h3>GROUP_BY_COUNT_FILL_BLANKS_</h3>\n      <div id=\"question\">\n        <p>Consider the following data for tables {randomTableNameA} and {randomTableNameB}</p>\n        <table style={{width: \"100%\"}}>\n          <tbody>\n          <tr>\n            <td>\n              <Table schema={schemaA} tableData={tableDataA}/>\n            </td>\n            <td>\n              <Table schema={schemaB} tableData={tableDataB}/>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n        <p>Fill in the blanks below to produce the following output</p>\n        <Table schema={group.schema} tableData={group.tableData}/>\n        <hr/>\n        <div style={{wordSpacing: \"20px\", fontSize: \"1.2em\", fontWeight: \"bold\"}}>\n          SELECT {randomTableNameB}.[{randomTableNameA}ID_1] AS {randomRenameA},<br/>\n          [COUNT]([{randomTableNameA}_2].[{randomTableNameA}ID_3]) AS [{randomRenameB}_4]<br/>\n          FROM {randomTableNameA}, {randomTableNameB}<br/>\n          WHERE {randomTableNameA}.{randomTableNameA}ID = {randomTableNameB}.{randomTableNameA}ID<br/>\n          [GROUP] [BY] [{randomTableNameA}_5].[{randomTableNameA}ID_6];<br/>\n          <hr/>\n        </div>\n      </div>\n      <div id=\"answers\">\n      </div>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <br/>-- create table {randomTableNameA}<br/>\n          <CreateTableSql schema={schemaA}/>\n          <br/>-- insert into {randomTableNameA}<br/>\n          <InsertRandomRowsSql schema={schemaA} tableData={tableDataA}/>\n          <br/>-- create table {randomTableNameB}<br/>\n          <CreateTableSql schema={schemaB}/>\n          <br/>-- insert into {randomTableNameB}<br/>\n          <InsertRandomRowsSql schema={schemaB} tableData={tableDataB}/>\n          <br/>-- retrieve all records from left table<br/>\n          SELECT *<br/>\n          FROM {randomTableNameA};\n          <br/>\n          <br/>\n          -- retrieve all records from right table<br/>\n          SELECT *<br/>\n          FROM {randomTableNameB};\n          <br/>\n          <br/>\n          -- correct answer<br/>\n          SELECT {randomTableNameB}.{randomTableNameA}ID AS {randomRenameA},<br/>\n          COUNT({randomTableNameA}.{randomTableNameA}ID) AS {randomRenameB}<br/>\n          FROM {randomTableNameA}, {randomTableNameB}<br/>\n          WHERE {randomTableNameA}.{randomTableNameA}ID = {randomTableNameB}.{randomTableNameA}ID<br/>\n          GROUP BY {randomTableNameA}.{randomTableNameA}ID;<br/>\n          <br/>\n          -- drop tables<br/>\n          DROP TABLE {randomTableNameA};<br/>\n          DROP TABLE {randomTableNameB};<br/>\n\n        </div>\n        <div className=\"col-6\">\n        </div>\n      </div>\n\n    </>\n  )\n}\n\nexport default DbDesignQueryGroupByCountFillBlanks\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-join-multiple-choice.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/query/join/fill-blanks/query-join-fill-blanks.js",["610","611","612","613"],"import React from 'react'\nimport CreateTableSql from \"../../../sql/create-table\";\nimport InsertRandomRowsSql from \"../../../sql/insert-random-rows\";\nimport Table from \"../../../tables/table\";\nimport {randomStringCapitalized, randomInt, randomData, join} from \"../../../../utils/utils\";\n\nconst DbDesignQueryJoinFillBlanks = () => {\n  const randomTableNameA = randomStringCapitalized(2);\n  const randomTableNameB = randomStringCapitalized(2);\n\n  const randomRenameA = randomStringCapitalized(2);\n  const randomRenameB = randomStringCapitalized(2);\n  const randomRenamea = randomStringCapitalized(2);\n  const randomRenameb = randomStringCapitalized(2);\n\n  const schemaA = {\n    schemaName: 'QUIZ_MAKER',\n    tableName: randomTableNameA,\n    columns: [\n      {\n        name: `${randomTableNameA}ID`,\n        type: 'INT',\n        primaryKey: true,\n        autoIncrement: true,\n        notNull: true\n      },\n      {\n        name: `${randomTableNameA}1`,\n        type: 'VARCHAR',\n        size: 45\n      },\n      {\n        name: `${randomTableNameA}2`,\n        type: 'INT'\n      },\n      {\n        name: `${randomTableNameA}3`,\n        type: 'FLOAT'\n      }\n    ]\n  }\n  const schemaB = {\n    schemaName: 'QUIZ_MAKER',\n    tableName: randomTableNameB,\n    columns: [\n      {\n        name: `${randomTableNameB}ID`,\n        type: 'INT',\n        primaryKey: true,\n        autoIncrement: true,\n        notNull: true\n      },\n      {\n        name: `${randomTableNameB}1`,\n        type: 'VARCHAR',\n        size: 45\n      },\n      {\n        name: `${randomTableNameB}2`,\n        type: 'INT'\n      },\n      {\n        name: `${randomTableNameB}3`,\n        type: 'FLOAT'\n      },\n      {\n        name: `${randomTableNameA}ID`,\n        type: 'INT',\n        foreignKey: true,\n        referencesTable: randomTableNameA,\n        referencesField: `${randomTableNameA}ID`\n      }\n    ]\n  }\n  const randomPk1 = randomInt(1000)\n  const randomPk2 = randomInt(1000)\n  const randomPk3 = randomInt(1000)\n  const randomPk4 = randomInt(1000)\n  const randomPk5 = randomInt(1000)\n  let values = {}\n  values[`${randomTableNameA}ID`] = [randomPk1, randomPk2, randomPk3, randomPk4, randomPk5]\n  let tableDataA = randomData({\n    schema: schemaA,\n    values,\n    rowCount: 5\n  })\n  values = {}\n  values[`${randomTableNameA}ID`] = [randomPk1, randomPk1, randomPk2, randomPk2]\n  let tableDataB = randomData({\n    schema: schemaB,\n    values,\n    rowCount: 5\n  })\n  const joinedTable = join({\n    tableA: {data: tableDataA, schema: schemaA},\n    tableB: {data: tableDataB, schema: schemaB},\n    joinFieldA: `${randomTableNameA}ID`,\n    joinFieldB: `${randomTableNameA}ID`,\n    project: [\n      {table: randomTableNameA, field: `${randomTableNameA}1`},\n      {table: randomTableNameB, field: `${randomTableNameB}1`},\n      ]\n  })\n  console.log(joinedTable)\n  return (\n    <>\n      <h2>DB Design Query Join Fill Blanks</h2>\n      <div id=\"question\">\n        <p>Consider the following data for tables {randomTableNameA} and {randomTableNameB}</p>\n        <table style={{width: \"100%\"}}>\n          <tbody>\n          <tr>\n            <td>\n              <Table schema={schemaA} tableData={tableDataA}/>\n            </td>\n            <td>\n              <Table schema={schemaB} tableData={tableDataB}/>\n            </td>\n          </tr>\n          </tbody>\n        </table>\n        <p>Fill in the blanks below to produce the following output</p>\n        <Table schema={joinedTable.schema} tableData={joinedTable.tableData}/>\n        <hr/>\n        <div>\n          SELECT [{randomTableNameA}].B1, {randomTableNameB}.[{randomTableNameB}1]<br/>\n          FROM {randomTableNameA} [JOIN] [{randomTableNameB}]<br/>\n          ON [{randomTableNameA}].{randomTableNameA}ID = {randomTableNameB}.[{randomTableNameA}ID];\n          <hr/>\n        </div>\n      </div>\n      <div id=\"answers\">\n      </div>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <br/>-- create table {randomTableNameA}<br/>\n          <CreateTableSql schema={schemaA}/>\n          <br/>-- insert into {randomTableNameA}<br/>\n          <InsertRandomRowsSql schema={schemaA} tableData={tableDataA}/>\n          <br/>-- create table {randomTableNameB}<br/>\n          <CreateTableSql schema={schemaB}/>\n          <br/>-- insert into {randomTableNameB}<br/>\n          <InsertRandomRowsSql schema={schemaB} tableData={tableDataB}/>\n          <br/>-- retrieve all records from left table<br/>\n          SELECT *<br/>\n          FROM {randomTableNameA};\n          <br/>\n          <br/>\n          -- retrieve all records from right table<br/>\n          SELECT *<br/>\n          FROM {randomTableNameB};\n          <br/>\n          <br/>\n          -- correct answer<br/>\n          SELECT {randomTableNameA}.{randomTableNameA}1, {randomTableNameB}.{randomTableNameB}1<br/>\n          FROM {randomTableNameA} JOIN {randomTableNameB}<br/>\n          ON {randomTableNameA}.{randomTableNameA}ID = {randomTableNameB}.{randomTableNameA}ID;<br/>\n          <br/>\n          -- drop tables<br/>\n          DROP TABLE {randomTableNameA};<br/>\n          DROP TABLE {randomTableNameB};<br/>\n\n        </div>\n        <div className=\"col-6\">\n        </div>\n      </div>\n\n    </>\n  )\n}\n\nexport default DbDesignQueryJoinFillBlanks\n","/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/context-answer.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-all.js",["614"],"import React from 'react'\nimport {randomArrayElement, randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoFindAll = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    return(\n        <div>\n            <h1>Mongo Find All</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                {collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})\n                <br/>\n                <br/>\n                Which of the following options retrieves all the documents?\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                <b>db.{collection}.find()</b>\n                <hr/>\n                db.findAll({collection})\n                <hr/>\n                db.{collection}.findAll()\n                <hr/>\n                db.find({collection})\n                <hr/>\n                db.{collection}()\n                <hr/>\n                db.find.{collection}()\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-by-multiple-fields.js",["615","616","617"],"import React from 'react'\nimport {randomArrayElement, randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoFindByMultipleFields = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const value1 = identifiers[4];\n    const value2 = Math.round(Math.random() * 100);\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    return(\n        <div>\n            <h1>Mongo Find By Multiple Fields</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>\n                {collection}({field1}: string, {field2}: number, {field3}: {type3})\n                </b>\n                <br/>\n                <br/>\n                Which of the following options retrieves documents\n                whose field <b>{field1}</b> is equal to <b>\"{value1}\"</b>\n                and field <b>{field2}</b> is equal to <b>{value2}</b>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                <input size={50} value={`db.${collection}.find({${field1}: \"${value1}\", ${field2}: ${value2})`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find({${field1}: \"${value1}\"}, {${field2}: ${value2}})`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find({{${field1}: \"${value1}\"}, {${field2}: ${value2}}})`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find(\"${field1}: '${value1}' AND ${field2}: ${value2}\")`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find(\"${field1} == '${value1}' AND ${field2} == ${value2}\")`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find([${field1}: \"${value1}\", ${field2}: ${value2}])`}/>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-by-id.js",["618"],"import React from 'react'\nimport {randomArrayElement, randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoFindById = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    return(\n        <div>\n            <h1>Mongo Find By Id</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                {collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})\n                <br/>\n                <br/>\n                Which of the following options retrieves a document by its primary key?\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                <input size={50} value={`db.${collection}.find({_id: ObjectId(\"ABC\")})`}/>\n                <hr/>\n                <input size={50} value={`${collection}.db.find({_id: ObjectId(\"ABC\")})`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find({${field1}: \"ABC\"})`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.findById(\"ABC\")`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.findOne({_id: ObjectId(\"ABC\")})`}/>\n                <hr/>\n                <input size={50} value={`${collection}.db.findById(\"ABC\")`}/>\n                <hr/>\n                <input size={50} value={`${collection}.db.find(\"ABC\")`}/>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-by-field.js",["619","620"],"import React from 'react'\nimport {randomArrayElement, randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoFindByField = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const value1 = identifiers[4];\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    return(\n        <div>\n            <h1>Mongo Find By Field</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>\n                {collection}({field1}: string, {field2}: {type2}, {field3}: {type3})\n                </b>\n                <br/>\n                <br/>\n                Which of the following options retrieves documents\n                whose field <b>{field1}</b> is equal to <b>\"{value1}\"</b>?\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                <input size={50} value={`db.${collection}.find({${field1}: \"${value1}\"})`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find({\"${value1}\": a})`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find([${field1}: \"${value1}\"])`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find(${field1}: \"${value1}\")`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find(\"${field1}: '${value1}'\")`}/>\n                <hr/>\n                <input size={50} value={`db.${collection}.find(\"${field1} == '${value1}'\")`}/>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/project/mongo-project-include-several.js",["621","622"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoProjectIncludeSeveral = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const value1 = identifiers[4];\n    const value2 = Math.round(Math.random() * 100);\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    const choices = [\n        `db.${collection}.find({}, {${field1}: 1, ${field2}: 1})`,\n        `db.${collection}.find({}, {${field1}: true, ${field2}: true})`,\n        `db.${collection}.find({${field1}: 1, ${field2}: 1})`,\n        `db.${collection}.find({${field1}: true, ${field2}: true})`,\n        `db.${collection}.find({}, {$projection: [${field1}, ${field2}]})`\n    ]\n    return(\n        <div>\n            <h1>Mongo Project Include Several Fields</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>{collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})</b>\n                <br/>\n                <br/>\n                Which of the following options only includes\n                fields <b>{field1}</b> and <b>{field2}</b>, but not <b>{field3}</b>?\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <>\n                            <input size={70}\n                                   style={{border: \"none\"}}\n                                   value={choice}/>\n                                   <hr/>\n                           </>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-and.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/project/mongo-project-exclude-id.js",["623","624"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoProjectExcludeId = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const value1 = identifiers[4];\n    const value2 = Math.round(Math.random() * 100);\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    const choices = [\n        `db.${collection}.find({}, {${field1}: 1, _id: 0})`,\n        `db.${collection}.find({}, {${field1}: 1})`,\n        `db.${collection}.find({${field1}: 1, _id: 0})`,\n        `db.${collection}.find({${field1}: 1})`,\n    ]\n    return(\n        <div>\n            <h1>Mongo Project Exclude _id</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>{collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})</b>\n                <br/>\n                <br/>\n\n                Which of the following options only includes field <b>{field1}</b> and no other? Choose the best answer\n\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <>\n                            <input size={70}\n                                   style={{border: \"none\"}}\n                                   value={choice}/>\n                                   <hr/>\n                           </>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/insert/mongo-insert.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/update/mongo-update.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/schema/mongoose-schema-number.js",["625","626","627","628","629","630"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongooseSchemaNumber = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const valueStr = identifiers[4];\n    const valueNum = Math.round(Math.random() * 100);\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    const choices = [\n        field2,\n        `Schema`,\n        field1,\n        type1,\n    ];\n    return(\n        <div>\n            <h1>Mongo Schema Number</h1>\n            <div id=\"question123\">\n\n                Fill in the blanks below to complete code the snippet.\n                Only use lowercase, no quotations, no extra spaces\n                <br/>\n                <br/>\n                Declare a mongoose schema with a field called <b>{field1}</b> of type <b>{type1}</b>\n                <br/>\n                <br/>\n                <b>\n                    const {field2} = require(\"mongoose\");\n                    <br/>\n                    const schema = <u>____1____</u>.<u>____2____</u>({`{`}<u>____3____</u>{`:`} <u>____4____</u>{`}`})\n                </b>\n                <br/>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <ol>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <li>\n                            [{choice}]\n                            </li>\n                        )\n                    })\n                }\n                </ol>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-$gt.js",["631"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoFind$Gt = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const value1 = identifiers[4];\n    const value2 = Math.round(Math.random() * 100);\n    const type1 = types[0];\n    const type2 = \"number\";\n    const type3 = types[2];\n    return(\n        <div>\n            <h1>Mongo Find $Gt</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>{collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})</b>\n                <br/>\n                <br/>\n                Which of the following options\n                retrieves documents whose field\n                &nbsp;<b>{field2}</b> is greater than <b>{value2}</b>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n<input size={70}\n       value={`db.${collection}.find({${field2}: {$gt: ${value2}}})`}/>\n                <hr/>\n<input size={70}\n       value={`db.${collection}.find({$gt: {${field2}: ${value2}}})`}/>\n                <hr/>\n<input size={70}\n       value={`db.${collection}.findGreaterThan({${field2}: ${value2}})`}/>\n                <hr/>\n<input size={70}\n       value={`db.${collection}.find(\"${field2} $gt ${value2}\")`}/>\n                <hr/>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/update/mongo-replace.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/remove/mongo-remove.js",["632"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoRemove = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const valueStr = identifiers[4];\n    const valueNum = Math.round(Math.random() * 100);\n    const type1 = \"string\";//types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    const choices = [\n        `db.${collection}.remove({${field1}: \"${valueStr}\"})`,\n        `db.${collection}.delete({${field1}: \"${valueStr}\"})`,\n        `db.${collection}.find({${field1}: \"${valueStr}\"}).remove()`,\n        `db.${collection}.find({${field1}: \"${valueStr}\"}).delete()`,\n    ]\n    return(\n        <div>\n            <h1>Mongo Remove</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>{collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})</b>\n                <br/>\n                <br/>\n\n                Which of the following options deletes a document whose\n                field <b>{field1}</b> is equal to <b>\"{valueStr}\"</b>.\n\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <>\n                            <input size={70}\n                                   style={{border: \"none\"}}\n                                   value={choice}/>\n                                   <hr/>\n                           </>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/project/mongo-project-include-one.js",["633","634"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoProjectIncludeOne = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const value1 = identifiers[4];\n    const value2 = Math.round(Math.random() * 100);\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    const choices = [\n        `db.${collection}.find({}, {${field1}: 1})`,\n        `db.${collection}.find({}, {${field1}: true})`,\n        `db.${collection}.find({${field1}: 1})`,\n        `db.${collection}.find({${field1}: true})`,\n        `db.${collection}.find({}, {$projection: [${field1}]})`\n    ]\n    return(\n        <div>\n            <h1>Mongo Project One</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>{collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})</b>\n                <br/>\n                <br/>\n                Which of the following options only includes\n                field <b>{field1}</b>, but not fields <b>{field2}</b> or <b>{field3}</b>?\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <>\n                            <input size={70}\n                                   style={{border: \"none\"}}\n                                   value={choice}/>\n                                   <hr/>\n                           </>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/schema/mongoose-schema-collection.js",["635","636","637","638","639"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongooseSchemaCollection = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const valueStr = identifiers[4];\n    const valueNum = Math.round(Math.random() * 100);\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    const choices = [\n        field2,\n        `Schema`,\n        type1,\n        'collection',\n        collection\n    ];\n    return(\n        <div>\n            <h1>Mongo Schema Collection</h1>\n            <div id=\"question123\">\n\n                Fill in the blanks below to complete code the snippet.\n                Only use lowercase, no quotations, no extra spaces\n                <br/>\n                <br/>\n                Declare a mongoose schema with a field\n                called <b>{field1}</b> of type <b>{type1}</b> that stores its\n                documents to a collection called <b>{collection}</b>\n\n                <br/>\n                <br/>\n                <b>\n                const {field2} = require(\"mongoose\")\n                    <br/>\n                const schema = <u>____1____</u>.<u>____2____</u>(\n                    <br/>\n                    {`{`}{field1}: <u>____3____</u>},\n                    <br/>\n                    {`{`}<u>____4____</u>: <u>\"____5____\"</u>})\n                </b>\n\n                <br/>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <ol>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <li>\n                            [{choice}]\n                            </li>\n                        )\n                    })\n                }\n                </ol>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/model/mongoose-model-find.js",["640"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongooseModelFind = () => {\n    const id = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = id[0];\n    const valueStr = id[9];\n    const valueNum = Math.round(Math.random() * 100);\n    const choices = [\n        'find',\n        id[1],\n        valueStr\n    ];\n    return(\n        <div>\n            <h1>Mongo Model Find</h1>\n            <div id=\"question123\">\n                Fill in the blanks below to complete code the snippet.\n                Only use lowercase, no quotations, no extra spaces\n                <br/>\n                <br/>\n                Given mongoose model <b>{id[4]}</b> created from the following\n                mongoose schema\n                <br/>\n                <br/>\n                <b>{collection}({id[1]}: string, {id[2]}: {types[1]}, {id[3]}: {types[2]})</b>\n                <br/>\n                <br/>\n                Retrieve all documents whose field <b>{id[1]}</b> is equal to <b>\"{valueStr}\"</b>\n                <br/>\n                <br/>\n                <b>{id[4]}.<u>____1____</u>({`{`}<u>____2____</u>: \"<u>____3____</u>\"})</b>\n                <br/>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <ol>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <li>\n                            [{choice}]\n                            </li>\n                        )\n                    })\n                }\n                </ol>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongo/find/mongo-find-$eq.js",["641"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongoFind$Eq = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false)\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const value1 = identifiers[4];\n    const value2 = Math.round(Math.random() * 100);\n    const type1 = \"string\";\n    const type2 = types[1];\n    const type3 = types[2];\n    return(\n        <div>\n            <h1>Mongo Find $Eq</h1>\n            <div id=\"question123\">\n                Consider the following schema\n                <br/>\n                <br/>\n                <b>{collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})</b>\n                <br/>\n                <br/>\n                Which of the following options retrieves documents\n                whose field <b>{field1}</b> is equal to <b>\"{value1}\"</b>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <hr/>\n<input size={70}\n       value={`db.${collection}.find({${field1}: {$eq: \"${value1}\"}})`}/>\n                <hr/>\n<input size={70}\n       value={`db.${collection}.find(\"${field1} $eq '${value1}'\")`}/>\n                <hr/>\n<input size={70}\n       value={`db.${collection}.find({$eq: {${field1}: \"${value1}\"}})`}/>\n                <hr/>\n<input size={70}\n       value={`db.${collection}.findEqual({${field1}: \"${value1}\"})`}/>\n                <hr/>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/schema/mongoose-schema-model.js",["642","643"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongooseSchemaModel = () => {\n    const identifiers = randomSet(10, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = identifiers[0];\n    const field1 = identifiers[1];\n    const field2 = identifiers[2];\n    const field3 = identifiers[3];\n    const field4 = identifiers[4];\n    const field5 = identifiers[5];\n    const field6 = identifiers[6];\n    const valueStr = identifiers[4];\n    const valueNum = Math.round(Math.random() * 100);\n    const type1 = types[0];\n    const type2 = types[1];\n    const type3 = types[2];\n    const choices = [\n        field4,\n        'model',\n        field5\n    ];\n    return(\n        <div>\n            <h1>Mongo Schema Model</h1>\n            <div id=\"question123\">\n\n                Fill in the blanks below to complete code the snippet.\n                <br/>\n                Only use lowercase, no quotations, no extra spaces\n                <br/>\n                <br/>\n                Consider the following mongoose schema\n                <br/>\n                <br/>\n                <b>\n                    {collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})\n                </b>\n                <br/>\n                <br/>\n                Create a mongoose model called \"SomeModel\" using a schema stored in file \"{field6}.js\"\n                <br/>\n                <br/>\n                <b>\n                const {field4} = require(\"mongoose\")\n                    <br/>\n                const {field5} = require(\"./{field6}\")\n                    <br/>\n                const someModel = <u>____1____</u>.<u>____2____</u>(\"SomeModel\", <u>____3____</u>)\n                </b>\n                <br/>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <ol>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <li>\n                            [{choice}]\n                            </li>\n                        )\n                    })\n                }\n                </ol>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/model/mongoose-model-find-by-id.js",["644"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\n\nexport const MongooseModelFindById = () => {\n    const id = randomSet(20, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = id[18];\n    const model = id[17];\n    const field1 = id[0], type1 = 'string';//types[0];\n    const field2 = id[1], type2 = types[1];\n    const field3 = id[2], type3 = types[2];\n    const valueStr = id[19];\n    const valueNum = Math.round(Math.random() * 100);\n    const choices = [\n        'findById',\n        valueStr\n    ];\n    return(\n        <div>\n            <h1>Mongo Model Find By Id</h1>\n            <div id=\"question123\">\n                Fill in the blanks below to complete code the snippet.\n                Only use lowercase, no quotations, no extra spaces\n                <br/>\n                <br/>\n                Given mongoose model called <b>{model}</b> created from the following\n                mongoose schema\n                <br/>\n                <br/>\n                <b>{collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})</b>\n                <br/>\n                <br/>\n                Retrieve a single document whose primary key is equal to <b>\"{valueStr}\"</b>\n                <br/>\n                <br/>\n                <b>{model}.<u>____1____</u>(\"<u>____2____</u>\")</b>\n                <br/>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <ol>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <li>\n                            [{choice}]\n                            </li>\n                        )\n                    })\n                }\n                </ol>\n            </div>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/db-design/mongodb/mongoose/model/mongoose-model-find-one.js",["645"],"import React from 'react'\nimport {randomSet, jsDataTypes} from \"../../../../utils/utils\";\nimport FillMultipleBlanks from \"../../../../questions/fill-multiple-blanks\";\n\nexport const MongooseModelFindOne = () => {\n    const id = randomSet(20, null, false);\n    const types = randomSet(3, jsDataTypes, false);\n    const collection = id[18];\n    const model = id[17];\n    const field1 = id[0], type1 = 'string';//types[0];\n    const field2 = id[1], type2 = types[1];\n    const field3 = id[2], type3 = types[2];\n    const valueStr = id[19];\n    const valueNum = Math.round(Math.random() * 100);\n    const choices = [\n        'findOne',\n        field1,\n        valueStr\n    ];\n    return(\n        <div>\n            <h1>Mongo Model Find One</h1>\n            <div id=\"question123\">\n                Fill in the blanks below to complete code the snippet.\n                <br/>\n                Only use lowercase, no quotations, no extra spaces\n                <br/>\n                <br/>\n                Given a mongoose model called <b>{model}</b> created from the following\n                mongoose schema\n                <br/>\n                <br/>\n                <b>{collection}({field1}: {type1}, {field2}: {type2}, {field3}: {type3})</b>\n                <br/>\n                <br/>\n                Retrieve a single document whose\n                field <b>{field1}</b> is equal to <b>\"{valueStr}\"</b>\n                <br/>\n                <br/>\n                <b>{model}.<u>____1____</u>({`{`}____2____: \"<u>____3____</u>\"})</b>\n                <br/>\n                <br/>\n            </div>\n            <div id=\"answers234\">\n                <ol>\n                {\n                    choices.map((choice) => {\n                        return(\n                            <li>\n                            [{choice}]\n                            </li>\n                        )\n                    })\n                }\n                </ol>\n            </div>\n            <FillMultipleBlanks/>\n        </div>\n    )\n}\n","/Users/jannunzi/webdev/quiz-maker/src/utils/utils.js",["646"],"import JsxParser from \"react-jsx-parser\";\nimport React from \"react\";\n\nexport const groupByCount =\n  ({\n    tableA, tableB,\n    groupByField,\n    renameA, renameB,\n    countField,\n    project\n   }) => {\n    const groupByFieldIndexA = tableA.schema.columns.findIndex(column => column.name === groupByField)\n    const groupByFieldIndexB = tableB.schema.columns.findIndex(column => column.name === groupByField)\n\n    console.log(groupByFieldIndexA)\n    console.log(groupByFieldIndexB)\n\n    const count = {}\n    for(let a=0; a<tableA.data.length; a++) {\n      const rowA = tableA.data[a]\n      const groupByFieldValueA = rowA[groupByFieldIndexA]\n      for (let b = 0; b < tableB.data.length; b++) {\n        const rowB = tableB.data[b]\n        const groupByFieldValueB = rowB[groupByFieldIndexB]\n        if(groupByFieldValueA === groupByFieldValueB) {\n          if(typeof count[groupByFieldValueA] === 'undefined') {\n            count[groupByFieldValueA] = 0\n          }\n          count[groupByFieldValueA]++\n        }\n      }\n    }\n    let countTable = []\n    Object.keys(count).forEach(key => {\n      console.log(key)\n      const row = [parseInt(key), count[key]]\n      countTable.push(row)\n    })\n    console.log(countTable)\n    const resultTable = {\n      schema: {\n        tableName: \"Result Grid\",\n        // rowColors: [\"#bbffbb\",\"#bbbbff\", \"#ffbbbb\"],\n        columns: [\n          {name: renameA, type: 'INT'},\n          {name: renameB, type: 'INT'}\n        ]\n      },\n      tableData: countTable\n    }\n    return resultTable\n}\nexport const join = (\n  {\n    tableA, tableB,\n    joinFieldA, joinFieldB,\n    project\n}) => {\n  let result = []\n  const joinFieldAindex = tableA.schema.columns.findIndex(column => column.name === joinFieldA)\n  const joinFieldBindex = tableB.schema.columns.findIndex(column => column.name === joinFieldB)\n  const projectFieldIndices = project.map(p => {\n    const table = p.table === tableA.schema.tableName ? tableA : tableB\n    const index = table.schema.columns.findIndex(column => column.name === p.field)\n    return {\n      table: p.table,\n      fieldIndex: index\n    }\n  })\n  for(let a=0; a<tableA.data.length; a++) {\n    const rowA = tableA.data[a]\n    for(let b=0; b<tableB.data.length; b++) {\n      const rowB = tableB.data[b]\n      const joinFieldAvalue = rowA[joinFieldAindex]\n      const joinFieldBvalue = rowB[joinFieldBindex]\n      if(joinFieldAvalue === joinFieldBvalue) {\n        const r = {}\n        r[tableA.schema.tableName] = rowA\n        r[tableB.schema.tableName] = rowB\n        result.push(r)\n      }\n    }\n  }\n  let resultJoined = []\n  for(let r=0; r<result.length;r++) {\n    let resultRowJoined = []\n    for(let p=0; p<projectFieldIndices.length; p++) {\n      const table = projectFieldIndices[p].table;\n      const index = projectFieldIndices[p].fieldIndex;\n      resultRowJoined[p] = result[r][table][index]\n    }\n    resultJoined.push(resultRowJoined)\n  }\n  const schemaProjected = {...tableA.schema}\n  const columnsFromA = tableA.schema.columns.filter(column => project.findIndex(p => p.field === column.name) >= 0)\n  const columnsFromB = tableB.schema.columns.filter(column => project.findIndex(p => p.field === column.name) >= 0)\n  schemaProjected.columns = [...columnsFromA, ...columnsFromB]\n  schemaProjected.tableName = 'Result Grid'\n  const resultTable = {\n    schema: schemaProjected,\n    tableData: resultJoined\n  }\n  return resultTable\n}\n\nexport const randomData =\n  ({\n     schema,\n     rowCount,\n     values\n   }) =>\n{\n  let tableData = []\n  for(let row=0; row<rowCount; row++) {\n    let rowData = []\n    for(let col=0; col<schema.columns.length; col++) {\n      const columnName = schema.columns[col].name\n      if(values && values[columnName]) {\n        rowData[col] = null\n        if(values[columnName] && values[columnName][row]) {\n          rowData[col] = values[columnName][row]\n        }\n      } else {\n        const columnType = schema.columns[col].type\n        if(columnType === 'INT') {\n          rowData[col] = randomInt(10000)\n        } else if(columnType === 'VARCHAR') {\n          rowData[col] = randomString(5)\n        } else if(columnType === 'FLOAT') {\n          rowData[col] = randomFloat(10000, 2)\n        }\n      }\n    }\n    tableData.push(rowData)\n  }\n  return tableData\n}\n\nexport const randomIntArray = (size=5, range=100, offset=10) => {\n    const integers = [];\n    let count = 0;\n    while(count < size) {\n        let integer = randomInt(range, offset)\n        const index = integers.indexOf(integer)\n        if(index < 0) {\n            integers.push(integer)\n            count++;\n        }\n    }\n    return integers\n}\n\nexport const randomArrayOfStrings = (stringSize=2, howManyStrings=20, capitalize=false) => {\n    const strings = [];\n    let count = 0;\n    while(count < howManyStrings) {\n        let ztring = randomStringCapitalized(stringSize)\n        ztring = capitalize ? ztring : ztring.toLowerCase()\n        const index = strings.indexOf(ztring)\n        if(index < 0) {\n            strings.push(ztring)\n            count++;\n        }\n    }\n    return strings\n}\n\nexport const randomStringCapitalized = (length) => {\n  var result           = '';\n  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  var charactersLength = characters.length;\n  for ( var i = 0; i < length; i++ ) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport const randomString = (length) => {\n  var result           = '';\n  var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for ( var i = 0; i < length; i++ ) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport const randomWordSet = (count) => {\n    \n}\n\nexport const randomInt = (range, offset=0) => offset + Math.round(Math.random() * range)\nexport const randomFloat = (range, digits, offset=0) => offset + (Math.random() * range).toFixed(digits)\n\n\nexport const randomFruitSet = (count) => {\n    let c = 0;\n    let s = [];\n    while (c < count && c < fruits.length) {\n        const index = randomInt(count)\n        const randomFruit = fruits[index]\n        const alreadyPicked = s.findIndex(f => randomFruit === f) >= 0\n        if(!alreadyPicked) {\n            s.push(randomFruit)\n            c++\n        }\n    }\n    return s;\n}\n\nexport const randomSet = (count, array, capitalized = false) => {\n    if(!array) {\n        array = allArrays\n    }\n    if(!count) {\n        if(!array) {\n            count = array.length;\n        } else {\n            count = 20\n        }\n    }\n    let c = 0;\n    let s = [];\n    while (c < count && c < array.length) {\n        const index = randomInt(array.length)\n        const randomFruit = array[index]\n        const alreadyPicked = s.findIndex(f => randomFruit === f) >= 0\n        if(randomFruit && !alreadyPicked) {\n            s.push(\n                capitalized ? randomFruit.toUpperCase() : randomFruit.toLowerCase()\n            )\n            // s.push(randomFruit)\n            c++\n        }\n    }\n    return s;\n}\n\nexport const randomArray = () => {\n    const index = randomInt(2)\n    return arrays[index]\n}\n\nexport const randomArrayElement = (array) => {\n    if(!array) {\n        array = allArrays\n    }\n    const index = randomInt(array.length)\n    return array[index]\n}\n\nexport const shuffleArray = (array) => {\n    let currentIndex = array.length, randomIndex;\n\n    while (currentIndex != 0) {\n\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n}\n\nexport const work = [\n    \"project\",\n    \"employee\",\n    \"stakeholder\",\n    \"task\",\n    \"job\",\n    \"chart\",\n    \"dead_line\",\n    \"due_date\",\n    \"workload\",\n    \"issue\",\n    \"step\",\n    \"sub_task\",\n    \"deliverable\",\n    \"assignee\",\n    \"engineer\",\n    \"business_analyst\",\n    \"version\",\n    \"revision\",\n    \"criteria\"\n]\n\nexport const destinations = [\n    \"Rome\",\n    \"Paris\",\n    \"Miami\",\n    \"Austin\",\n    \"Dallas\",\n    \"Boston\",\n    \"Cairo\",\n    \"Sidney\"\n]\n\nexport const fruits = [\n    \"apple\",\n    \"apricots\",\n    \"avocado\",\n    \"banana\",\n    \"blackberries\",\n    \"blueberries\",\n    \"carrot\",\n    \"cherry\",\n    \"coconut\",\n    \"cranberry\",\n    \"elderberry\",\n    \"fig\",\n    \"grape\",\n    \"guava\",\n    \"kiwi\",\n    \"lemon\",\n    \"lime\",\n    \"mango\",\n    \"melon\",\n    \"orange\",\n    \"papaya\",\n    \"peach\",\n    \"pear\",\n    \"pineapple\",\n    \"pumpkin\",\n    \"raspberry\",\n    \"strawberry\",\n    \"watermelon\",\n];\n\nexport const vegetables = [\n    \"arugula\",\n    \"artichoke\",\n    \"asparagus\",\n    \"basil\",\n    \"broccoli\",\n    \"carrot\",\n    \"cabbage\",\n    \"cauliflower\",\n    \"celery\",\n    \"cucumber\",\n    \"garlic\",\n    \"kale\",\n    \"lettuce\",\n    \"mushrooms\",\n    \"onion\",\n    \"oregano\",\n    \"parsley\",\n    \"pepper\",\n    \"potato\",\n    \"radish\",\n    \"spinach\",\n    \"tomato\",\n    \"turnip\",\n    \"zucchini\",\n]\n\nexport const images = Array(20).fill(0).map((_, i) =>\n    `https://picsum.photos/200?${i}`\n)\n\nexport const theImage = <JsxParser\n    jsx={`<img src=\"https://picsum.photos/200\"/>`}\n/>;\n\nexport const randomImage = (width, height) =>\n    <JsxParser\n        jsx={`<img src=\"https://picsum.photos/${width}/${height}?${(new Date()).getTime()}\"/>`}\n/>;\n\n// export const textInput = <JsxParser jsx={`<input type=\"text\"/>`}/>\nexport const textInput = (size=10, v=\"some name\") =>\n    <JsxParser\n        jsx={`<input type=\"text\" size=\"${size}\"/>${v}`}/>;\nexport const smallTextInput = <input type=\"text\" size={3}/>;\nexport const textArea = <textarea></textarea>;\nexport const radioBtn = () => <JsxParser jsx={`<input type=\"radio\"/>`}/>\nexport const heading = (size) => <JsxParser jsx={`<h1>The heading</h1>`}/>\n\nexport const education = [\n    \"tuition\",\n    \"graduation\",\n    \"school\",\n    \"department\",\n    \"grade\",\n    \"section\",\n    \"teacher\",\n    \"professor\",\n    \"student\",\n    \"topic\",\n    \"home_work\",\n    \"due_date\",\n    \"quiz\",\n    \"exam\",\n    \"training\",\n    \"curriculum\"\n]\n\nexport const aggregationFunctions = [\n    \"COUNT\",\n    \"AVG\",\n    \"MAX\",\n    \"MIN\"\n]\n\nexport const jsDataTypes = [\n    \"String\",\n    \"Number\",\n    \"Date\"\n]\n\nexport const colors = [\n    \"yellow\",\n    \"red\",\n    \"blue\",\n    \"green\",\n    \"white\",\n    \"black\",\n];\n\nexport const arrays = [\n    fruits,\n    work,\n    education\n]\n\nexport const allArrays = [\n    ...fruits,\n    ...work,\n    ...education\n]","/Users/jannunzi/webdev/quiz-maker/src/db-design/tables/table.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/nav1.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/state/redux/counter.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/fk.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/diamond-shape.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/clazz.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/pk.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/association-horizontal.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/utils/class-diagram-horizontal.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/routing/routing-navigation.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/title.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/value.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/textarea.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/labels-and-radios.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/placeholder.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/css/color-and-bg-color.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/filter/filter.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/es6/map/map1.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/sql/insert-random-rows.js",[],"/Users/jannunzi/webdev/quiz-maker/src/db-design/sql/create-table.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/classes/component-1.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/classes/component-2.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/classes/component-3.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/classes/component-4.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/redux/component-w.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/redux/component-x.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/redux/component-y.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/redux/component-z.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/functions/component-a.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/functions/component-b.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/functions/component-c.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/react/context/example1/prop-drilling/functions/component-d.js",[],["647","648"],"/Users/jannunzi/webdev/quiz-maker/src/notebook/reducers/pages-reducer.js",[],"/Users/jannunzi/webdev/quiz-maker/src/notebook/actions/page-actions.js",[],"/Users/jannunzi/webdev/quiz-maker/src/notebook/components/pages/page-list.js",[],"/Users/jannunzi/webdev/quiz-maker/src/notebook/components/pages/page.js",["649","650"],"import React, {useState, useEffect} from 'react';\nimport {useParams} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nconst Page = (\n    {\n        page = {},\n        findPageById,\n    }) => {\n    const {pageId} = useParams();\n    return(\n        <div>\n            <h2>Page {pageId}</h2>\n            <div className=\"\" contentEditable={true}>\n            </div>\n        </div>\n    )\n};\n\nconst stpm = (state) => ({\n    page: state.pagesReducer.page,\n})\n\nconst dtpm = (dispatcher) => ({\n    findPageById: (pageId) => {\n        \n    },\n})\n\nexport default connect(stpm, dtpm)(Page);","/Users/jannunzi/webdev/quiz-maker/src/notebook/components/notebooks/notebook.js",[],"/Users/jannunzi/webdev/quiz-maker/src/notebook/components/notebooks/notebook-list.js",[],"/Users/jannunzi/webdev/quiz-maker/src/notebook/actions/notebook-actions.js",[],"/Users/jannunzi/webdev/quiz-maker/src/notebook/reducers/notebooks-reducer.js",[],"/Users/jannunzi/webdev/quiz-maker/src/questions/fill-multiple-blanks.js",[],"/Users/jannunzi/webdev/quiz-maker/src/questions/fill-multiple-blanks-editor.js",["651"],"import React, {useState, useEffect} from \"react\";\nimport FillMultipleBlanks from \"./fill-multiple-blanks\";\nimport CKEditor from 'ckeditor4-react';\n\nconst FillMultipleBlanksEditor = () => {\n    const [question, setQuestion] = useState('');\n    return(\n        <div>\n            <h1>Fill Multiple Blanks Editor</h1>\n            <CKEditor\n                data={`\n                    <ul>\n                        <li>{random()}</li>\n                        <li>{types}</li>\n                        <li>{fruit}</li>\n                        <li>{fruits}</li>\n                        <li>{fruits[0]}</li>\n                        <li>{randomArray({array: fruits})[2]}</li>\n                        <li>{textArea}</li>\n                        <li>{textInput(3)}{textInput(6)}</li>\n                    </ul>`\n                }\n                onChange={(e) => setQuestion(e.editor.getData())}\n            />\n            <h2>Preview</h2>\n            <FillMultipleBlanks\n                question={question}/>\n        </div>\n    )\n}\n\nexport default FillMultipleBlanksEditor;","/Users/jannunzi/webdev/quiz-maker/src/vocabularies/index.js",[],"/Users/jannunzi/webdev/quiz-maker/src/web-dev/html/labels-for-input.js",["652","653","654","655","656"],"import React from 'react'\nimport {randomArrayOfStrings} from \"../../utils/utils\";\n\nconst LabelsForInput = () => {\n    const strings = randomArrayOfStrings(7)\n    const username1 = strings[0];\n    const username2 = strings[1];\n    const username3 = strings[2];\n    const username4 = strings[3];\n    const USERNAME = strings[4];\n    const USERNAME2 = strings[5];\n    const USERNAME3 = strings[6];\n    const USERNAME4 = strings[7];\n    return(\n        <div>\n            <h3>Labels for input</h3>\n            <div>\n                Consider the following label \"{USERNAME}\" and input text field below it.\n                A user clicks on the label \"{USERNAME}\" and the input field receives focus, i.e., the cursor appears in the input field ready for the user to type in data.\n                <br/>\n                <br/>\n                <label for=\"${username}\">{USERNAME}</label>\n                <br/>\n                <input id=\"${username}\"/>\n                <br/>\n                <br/>\n                Which of the following code snippets achieves this behavior?\n            </div>\n            <hr/>\n            <input type=\"checkbox\" checked={true}/>\n            <pre>\n                    {`\n<label for=\"${username1}\">${USERNAME}</label>\n<input id=\"${username1}\"/>\n`}                    \n                </pre>\n            <hr/>\n            <input type=\"checkbox\" checked={false}/>\n            <pre>\n                    {`\n<label id=\"${username2}\">${USERNAME}</label>\n<input id=\"${username2}\"/>\n`}                    \n                </pre>\n            <hr/>\n            <input type=\"checkbox\" checked={false}/>\n            <pre>\n                    {`\n<label name=\"${username3}\">${USERNAME}</label>\n<input name=\"${USERNAME}\"/>\n`}                    \n                </pre>\n            <hr/>\n            <input type=\"checkbox\" checked={false}/>\n            <pre>\n                    {`\n<label for=\"${USERNAME}\">${USERNAME}</label>\n<input name=\"${username4}\"/>\n`}                    \n                </pre>\n        </div>\n    )\n}\n\nexport default LabelsForInput",{"ruleId":"657","severity":1,"message":"658","line":7,"column":8,"nodeType":"659","messageId":"660","endLine":7,"endColumn":25},{"ruleId":"657","severity":1,"message":"661","line":8,"column":8,"nodeType":"659","messageId":"660","endLine":8,"endColumn":20},{"ruleId":"662","replacedBy":"663"},{"ruleId":"664","replacedBy":"665"},{"ruleId":"657","severity":1,"message":"666","line":2,"column":37,"nodeType":"659","messageId":"660","endLine":2,"endColumn":46},{"ruleId":"667","severity":1,"message":"668","line":5,"column":5,"nodeType":"669","messageId":"670","endLine":7,"endColumn":6},{"ruleId":"667","severity":1,"message":"668","line":4,"column":5,"nodeType":"669","messageId":"670","endLine":6,"endColumn":6},{"ruleId":"667","severity":1,"message":"668","line":4,"column":5,"nodeType":"669","messageId":"670","endLine":6,"endColumn":6},{"ruleId":"671","severity":1,"message":"672","line":5,"column":1,"nodeType":"673","endLine":60,"endColumn":2},{"ruleId":"671","severity":1,"message":"672","line":5,"column":1,"nodeType":"673","endLine":153,"endColumn":2},{"ruleId":"657","severity":1,"message":"674","line":46,"column":11,"nodeType":"659","messageId":"660","endLine":46,"endColumn":26},{"ruleId":"657","severity":1,"message":"675","line":15,"column":11,"nodeType":"659","messageId":"660","endLine":15,"endColumn":19},{"ruleId":"657","severity":1,"message":"676","line":40,"column":11,"nodeType":"659","messageId":"660","endLine":40,"endColumn":16},{"ruleId":"657","severity":1,"message":"677","line":41,"column":11,"nodeType":"659","messageId":"660","endLine":41,"endColumn":18},{"ruleId":"657","severity":1,"message":"678","line":42,"column":11,"nodeType":"659","messageId":"660","endLine":42,"endColumn":19},{"ruleId":"657","severity":1,"message":"679","line":3,"column":8,"nodeType":"659","messageId":"660","endLine":3,"endColumn":10},{"ruleId":"657","severity":1,"message":"680","line":4,"column":8,"nodeType":"659","messageId":"660","endLine":4,"endColumn":10},{"ruleId":"657","severity":1,"message":"681","line":2,"column":8,"nodeType":"659","messageId":"660","endLine":2,"endColumn":20},{"ruleId":"657","severity":1,"message":"682","line":16,"column":11,"nodeType":"659","messageId":"660","endLine":16,"endColumn":16},{"ruleId":"657","severity":1,"message":"679","line":3,"column":8,"nodeType":"659","messageId":"660","endLine":3,"endColumn":10},{"ruleId":"657","severity":1,"message":"680","line":4,"column":8,"nodeType":"659","messageId":"660","endLine":4,"endColumn":10},{"ruleId":"671","severity":1,"message":"672","line":5,"column":1,"nodeType":"673","endLine":65,"endColumn":2},{"ruleId":"657","severity":1,"message":"682","line":16,"column":11,"nodeType":"659","messageId":"660","endLine":16,"endColumn":16},{"ruleId":"657","severity":1,"message":"683","line":18,"column":11,"nodeType":"659","messageId":"660","endLine":18,"endColumn":15},{"ruleId":"657","severity":1,"message":"684","line":7,"column":11,"nodeType":"659","messageId":"660","endLine":7,"endColumn":21},{"ruleId":"657","severity":1,"message":"685","line":8,"column":11,"nodeType":"659","messageId":"660","endLine":8,"endColumn":16},{"ruleId":"657","severity":1,"message":"686","line":9,"column":27,"nodeType":"659","messageId":"660","endLine":9,"endColumn":32},{"ruleId":"657","severity":1,"message":"687","line":10,"column":27,"nodeType":"659","messageId":"660","endLine":10,"endColumn":32},{"ruleId":"657","severity":1,"message":"688","line":11,"column":27,"nodeType":"659","messageId":"660","endLine":11,"endColumn":32},{"ruleId":"657","severity":1,"message":"689","line":12,"column":27,"nodeType":"659","messageId":"660","endLine":12,"endColumn":32},{"ruleId":"657","severity":1,"message":"690","line":13,"column":27,"nodeType":"659","messageId":"660","endLine":13,"endColumn":32},{"ruleId":"657","severity":1,"message":"691","line":14,"column":27,"nodeType":"659","messageId":"660","endLine":14,"endColumn":32},{"ruleId":"657","severity":1,"message":"692","line":15,"column":27,"nodeType":"659","messageId":"660","endLine":15,"endColumn":32},{"ruleId":"657","severity":1,"message":"693","line":18,"column":11,"nodeType":"659","messageId":"660","endLine":18,"endColumn":17},{"ruleId":"657","severity":1,"message":"694","line":20,"column":11,"nodeType":"659","messageId":"660","endLine":20,"endColumn":19},{"ruleId":"657","severity":1,"message":"684","line":7,"column":11,"nodeType":"659","messageId":"660","endLine":7,"endColumn":21},{"ruleId":"657","severity":1,"message":"685","line":8,"column":11,"nodeType":"659","messageId":"660","endLine":8,"endColumn":16},{"ruleId":"657","severity":1,"message":"686","line":9,"column":27,"nodeType":"659","messageId":"660","endLine":9,"endColumn":32},{"ruleId":"657","severity":1,"message":"687","line":10,"column":27,"nodeType":"659","messageId":"660","endLine":10,"endColumn":32},{"ruleId":"657","severity":1,"message":"688","line":11,"column":27,"nodeType":"659","messageId":"660","endLine":11,"endColumn":32},{"ruleId":"657","severity":1,"message":"689","line":12,"column":27,"nodeType":"659","messageId":"660","endLine":12,"endColumn":32},{"ruleId":"657","severity":1,"message":"690","line":13,"column":27,"nodeType":"659","messageId":"660","endLine":13,"endColumn":32},{"ruleId":"657","severity":1,"message":"691","line":14,"column":27,"nodeType":"659","messageId":"660","endLine":14,"endColumn":32},{"ruleId":"657","severity":1,"message":"692","line":15,"column":27,"nodeType":"659","messageId":"660","endLine":15,"endColumn":32},{"ruleId":"657","severity":1,"message":"693","line":18,"column":11,"nodeType":"659","messageId":"660","endLine":18,"endColumn":17},{"ruleId":"657","severity":1,"message":"695","line":19,"column":11,"nodeType":"659","messageId":"660","endLine":19,"endColumn":20},{"ruleId":"657","severity":1,"message":"696","line":20,"column":11,"nodeType":"659","messageId":"660","endLine":20,"endColumn":20},{"ruleId":"657","severity":1,"message":"684","line":7,"column":11,"nodeType":"659","messageId":"660","endLine":7,"endColumn":21},{"ruleId":"657","severity":1,"message":"685","line":8,"column":11,"nodeType":"659","messageId":"660","endLine":8,"endColumn":16},{"ruleId":"657","severity":1,"message":"686","line":9,"column":27,"nodeType":"659","messageId":"660","endLine":9,"endColumn":32},{"ruleId":"657","severity":1,"message":"687","line":10,"column":27,"nodeType":"659","messageId":"660","endLine":10,"endColumn":32},{"ruleId":"657","severity":1,"message":"688","line":11,"column":27,"nodeType":"659","messageId":"660","endLine":11,"endColumn":32},{"ruleId":"657","severity":1,"message":"689","line":12,"column":27,"nodeType":"659","messageId":"660","endLine":12,"endColumn":32},{"ruleId":"657","severity":1,"message":"690","line":13,"column":27,"nodeType":"659","messageId":"660","endLine":13,"endColumn":32},{"ruleId":"657","severity":1,"message":"691","line":14,"column":27,"nodeType":"659","messageId":"660","endLine":14,"endColumn":32},{"ruleId":"657","severity":1,"message":"692","line":15,"column":27,"nodeType":"659","messageId":"660","endLine":15,"endColumn":32},{"ruleId":"657","severity":1,"message":"693","line":18,"column":11,"nodeType":"659","messageId":"660","endLine":18,"endColumn":17},{"ruleId":"657","severity":1,"message":"695","line":19,"column":11,"nodeType":"659","messageId":"660","endLine":19,"endColumn":20},{"ruleId":"657","severity":1,"message":"696","line":20,"column":11,"nodeType":"659","messageId":"660","endLine":20,"endColumn":20},{"ruleId":"657","severity":1,"message":"684","line":7,"column":11,"nodeType":"659","messageId":"660","endLine":7,"endColumn":21},{"ruleId":"657","severity":1,"message":"685","line":8,"column":11,"nodeType":"659","messageId":"660","endLine":8,"endColumn":16},{"ruleId":"657","severity":1,"message":"686","line":9,"column":27,"nodeType":"659","messageId":"660","endLine":9,"endColumn":32},{"ruleId":"657","severity":1,"message":"687","line":10,"column":27,"nodeType":"659","messageId":"660","endLine":10,"endColumn":32},{"ruleId":"657","severity":1,"message":"688","line":11,"column":27,"nodeType":"659","messageId":"660","endLine":11,"endColumn":32},{"ruleId":"657","severity":1,"message":"689","line":12,"column":27,"nodeType":"659","messageId":"660","endLine":12,"endColumn":32},{"ruleId":"657","severity":1,"message":"690","line":13,"column":27,"nodeType":"659","messageId":"660","endLine":13,"endColumn":32},{"ruleId":"657","severity":1,"message":"691","line":14,"column":27,"nodeType":"659","messageId":"660","endLine":14,"endColumn":32},{"ruleId":"657","severity":1,"message":"692","line":15,"column":27,"nodeType":"659","messageId":"660","endLine":15,"endColumn":32},{"ruleId":"657","severity":1,"message":"693","line":18,"column":11,"nodeType":"659","messageId":"660","endLine":18,"endColumn":17},{"ruleId":"657","severity":1,"message":"696","line":20,"column":11,"nodeType":"659","messageId":"660","endLine":20,"endColumn":20},{"ruleId":"657","severity":1,"message":"694","line":21,"column":11,"nodeType":"659","messageId":"660","endLine":21,"endColumn":19},{"ruleId":"657","severity":1,"message":"697","line":2,"column":22,"nodeType":"659","messageId":"660","endLine":2,"endColumn":32},{"ruleId":"657","severity":1,"message":"698","line":2,"column":34,"nodeType":"659","messageId":"660","endLine":2,"endColumn":48},{"ruleId":"657","severity":1,"message":"699","line":2,"column":61,"nodeType":"659","messageId":"660","endLine":2,"endColumn":84},{"ruleId":"657","severity":1,"message":"700","line":2,"column":86,"nodeType":"659","messageId":"660","endLine":2,"endColumn":92},{"ruleId":"657","severity":1,"message":"701","line":3,"column":5,"nodeType":"659","messageId":"660","endLine":3,"endColumn":16},{"ruleId":"657","severity":1,"message":"697","line":4,"column":5,"nodeType":"659","messageId":"660","endLine":4,"endColumn":15},{"ruleId":"657","severity":1,"message":"698","line":5,"column":5,"nodeType":"659","messageId":"660","endLine":5,"endColumn":19},{"ruleId":"657","severity":1,"message":"699","line":7,"column":5,"nodeType":"659","messageId":"660","endLine":7,"endColumn":28},{"ruleId":"657","severity":1,"message":"700","line":8,"column":5,"nodeType":"659","messageId":"660","endLine":8,"endColumn":11},{"ruleId":"657","severity":1,"message":"702","line":11,"column":9,"nodeType":"659","messageId":"660","endLine":11,"endColumn":13},{"ruleId":"657","severity":1,"message":"697","line":2,"column":22,"nodeType":"659","messageId":"660","endLine":2,"endColumn":32},{"ruleId":"657","severity":1,"message":"698","line":2,"column":34,"nodeType":"659","messageId":"660","endLine":2,"endColumn":48},{"ruleId":"657","severity":1,"message":"699","line":2,"column":61,"nodeType":"659","messageId":"660","endLine":2,"endColumn":84},{"ruleId":"657","severity":1,"message":"700","line":2,"column":86,"nodeType":"659","messageId":"660","endLine":2,"endColumn":92},{"ruleId":"657","severity":1,"message":"697","line":2,"column":22,"nodeType":"659","messageId":"660","endLine":2,"endColumn":32},{"ruleId":"657","severity":1,"message":"698","line":2,"column":34,"nodeType":"659","messageId":"660","endLine":2,"endColumn":48},{"ruleId":"657","severity":1,"message":"699","line":2,"column":61,"nodeType":"659","messageId":"660","endLine":2,"endColumn":84},{"ruleId":"657","severity":1,"message":"700","line":2,"column":86,"nodeType":"659","messageId":"660","endLine":2,"endColumn":92},{"ruleId":"703","severity":1,"message":"704","line":70,"column":17,"nodeType":"705","endLine":70,"endColumn":27},{"ruleId":"703","severity":1,"message":"704","line":70,"column":36,"nodeType":"705","endLine":70,"endColumn":46},{"ruleId":"703","severity":1,"message":"704","line":72,"column":18,"nodeType":"705","endLine":72,"endColumn":28},{"ruleId":"657","severity":1,"message":"701","line":2,"column":9,"nodeType":"659","messageId":"660","endLine":2,"endColumn":20},{"ruleId":"657","severity":1,"message":"706","line":2,"column":22,"nodeType":"659","messageId":"660","endLine":2,"endColumn":34},{"ruleId":"657","severity":1,"message":"707","line":14,"column":11,"nodeType":"659","messageId":"660","endLine":14,"endColumn":12},{"ruleId":"657","severity":1,"message":"708","line":15,"column":11,"nodeType":"659","messageId":"660","endLine":15,"endColumn":12},{"ruleId":"657","severity":1,"message":"709","line":88,"column":7,"nodeType":"659","messageId":"660","endLine":88,"endColumn":14},{"ruleId":"657","severity":1,"message":"710","line":78,"column":7,"nodeType":"659","messageId":"660","endLine":78,"endColumn":13},{"ruleId":"657","severity":1,"message":"702","line":3,"column":9,"nodeType":"659","messageId":"660","endLine":3,"endColumn":13},{"ruleId":"657","severity":1,"message":"711","line":6,"column":11,"nodeType":"659","messageId":"660","endLine":6,"endColumn":18},{"ruleId":"657","severity":1,"message":"710","line":61,"column":7,"nodeType":"659","messageId":"660","endLine":61,"endColumn":13},{"ruleId":"657","severity":1,"message":"712","line":2,"column":15,"nodeType":"659","messageId":"660","endLine":2,"endColumn":20},{"ruleId":"657","severity":1,"message":"713","line":2,"column":19,"nodeType":"659","messageId":"660","endLine":2,"endColumn":26},{"ruleId":"657","severity":1,"message":"714","line":5,"column":57,"nodeType":"659","messageId":"660","endLine":5,"endColumn":61},{"ruleId":"657","severity":1,"message":"715","line":13,"column":9,"nodeType":"659","messageId":"660","endLine":13,"endColumn":22},{"ruleId":"657","severity":1,"message":"716","line":14,"column":9,"nodeType":"659","messageId":"660","endLine":14,"endColumn":22},{"ruleId":"657","severity":1,"message":"717","line":91,"column":9,"nodeType":"659","messageId":"660","endLine":91,"endColumn":18},{"ruleId":"657","severity":1,"message":"718","line":11,"column":9,"nodeType":"659","messageId":"660","endLine":11,"endColumn":22},{"ruleId":"657","severity":1,"message":"719","line":12,"column":9,"nodeType":"659","messageId":"660","endLine":12,"endColumn":22},{"ruleId":"657","severity":1,"message":"715","line":13,"column":9,"nodeType":"659","messageId":"660","endLine":13,"endColumn":22},{"ruleId":"657","severity":1,"message":"716","line":14,"column":9,"nodeType":"659","messageId":"660","endLine":14,"endColumn":22},{"ruleId":"657","severity":1,"message":"720","line":2,"column":9,"nodeType":"659","messageId":"660","endLine":2,"endColumn":27},{"ruleId":"657","severity":1,"message":"720","line":2,"column":9,"nodeType":"659","messageId":"660","endLine":2,"endColumn":27},{"ruleId":"657","severity":1,"message":"686","line":13,"column":11,"nodeType":"659","messageId":"660","endLine":13,"endColumn":16},{"ruleId":"657","severity":1,"message":"687","line":14,"column":11,"nodeType":"659","messageId":"660","endLine":14,"endColumn":16},{"ruleId":"657","severity":1,"message":"720","line":2,"column":9,"nodeType":"659","messageId":"660","endLine":2,"endColumn":27},{"ruleId":"657","severity":1,"message":"720","line":2,"column":9,"nodeType":"659","messageId":"660","endLine":2,"endColumn":27},{"ruleId":"657","severity":1,"message":"686","line":12,"column":11,"nodeType":"659","messageId":"660","endLine":12,"endColumn":16},{"ruleId":"657","severity":1,"message":"721","line":11,"column":11,"nodeType":"659","messageId":"660","endLine":11,"endColumn":17},{"ruleId":"657","severity":1,"message":"722","line":12,"column":11,"nodeType":"659","messageId":"660","endLine":12,"endColumn":17},{"ruleId":"657","severity":1,"message":"721","line":11,"column":11,"nodeType":"659","messageId":"660","endLine":11,"endColumn":17},{"ruleId":"657","severity":1,"message":"722","line":12,"column":11,"nodeType":"659","messageId":"660","endLine":12,"endColumn":17},{"ruleId":"657","severity":1,"message":"684","line":7,"column":11,"nodeType":"659","messageId":"660","endLine":7,"endColumn":21},{"ruleId":"657","severity":1,"message":"723","line":10,"column":11,"nodeType":"659","messageId":"660","endLine":10,"endColumn":17},{"ruleId":"657","severity":1,"message":"724","line":11,"column":11,"nodeType":"659","messageId":"660","endLine":11,"endColumn":19},{"ruleId":"657","severity":1,"message":"694","line":12,"column":11,"nodeType":"659","messageId":"660","endLine":12,"endColumn":19},{"ruleId":"657","severity":1,"message":"687","line":14,"column":11,"nodeType":"659","messageId":"660","endLine":14,"endColumn":16},{"ruleId":"657","severity":1,"message":"688","line":15,"column":11,"nodeType":"659","messageId":"660","endLine":15,"endColumn":16},{"ruleId":"657","severity":1,"message":"721","line":11,"column":11,"nodeType":"659","messageId":"660","endLine":11,"endColumn":17},{"ruleId":"657","severity":1,"message":"694","line":12,"column":11,"nodeType":"659","messageId":"660","endLine":12,"endColumn":19},{"ruleId":"657","severity":1,"message":"721","line":11,"column":11,"nodeType":"659","messageId":"660","endLine":11,"endColumn":17},{"ruleId":"657","severity":1,"message":"722","line":12,"column":11,"nodeType":"659","messageId":"660","endLine":12,"endColumn":17},{"ruleId":"657","severity":1,"message":"723","line":10,"column":11,"nodeType":"659","messageId":"660","endLine":10,"endColumn":17},{"ruleId":"657","severity":1,"message":"724","line":11,"column":11,"nodeType":"659","messageId":"660","endLine":11,"endColumn":19},{"ruleId":"657","severity":1,"message":"694","line":12,"column":11,"nodeType":"659","messageId":"660","endLine":12,"endColumn":19},{"ruleId":"657","severity":1,"message":"687","line":14,"column":11,"nodeType":"659","messageId":"660","endLine":14,"endColumn":16},{"ruleId":"657","severity":1,"message":"688","line":15,"column":11,"nodeType":"659","messageId":"660","endLine":15,"endColumn":16},{"ruleId":"657","severity":1,"message":"694","line":9,"column":11,"nodeType":"659","messageId":"660","endLine":9,"endColumn":19},{"ruleId":"657","severity":1,"message":"722","line":12,"column":11,"nodeType":"659","messageId":"660","endLine":12,"endColumn":17},{"ruleId":"657","severity":1,"message":"724","line":14,"column":11,"nodeType":"659","messageId":"660","endLine":14,"endColumn":19},{"ruleId":"657","severity":1,"message":"694","line":15,"column":11,"nodeType":"659","messageId":"660","endLine":15,"endColumn":19},{"ruleId":"657","severity":1,"message":"694","line":13,"column":11,"nodeType":"659","messageId":"660","endLine":13,"endColumn":19},{"ruleId":"657","severity":1,"message":"694","line":14,"column":11,"nodeType":"659","messageId":"660","endLine":14,"endColumn":19},{"ruleId":"725","severity":1,"message":"726","line":255,"column":25,"nodeType":"727","messageId":"728","endLine":255,"endColumn":27},{"ruleId":"662","replacedBy":"729"},{"ruleId":"664","replacedBy":"730"},{"ruleId":"657","severity":1,"message":"731","line":1,"column":16,"nodeType":"659","messageId":"660","endLine":1,"endColumn":24},{"ruleId":"657","severity":1,"message":"732","line":1,"column":26,"nodeType":"659","messageId":"660","endLine":1,"endColumn":35},{"ruleId":"657","severity":1,"message":"732","line":1,"column":26,"nodeType":"659","messageId":"660","endLine":1,"endColumn":35},{"ruleId":"657","severity":1,"message":"733","line":11,"column":11,"nodeType":"659","messageId":"660","endLine":11,"endColumn":20},{"ruleId":"657","severity":1,"message":"734","line":12,"column":11,"nodeType":"659","messageId":"660","endLine":12,"endColumn":20},{"ruleId":"657","severity":1,"message":"735","line":13,"column":11,"nodeType":"659","messageId":"660","endLine":13,"endColumn":20},{"ruleId":"736","severity":1,"message":"737","line":22,"column":28,"nodeType":"738","messageId":"739","endLine":22,"endColumn":41},{"ruleId":"736","severity":1,"message":"737","line":24,"column":27,"nodeType":"738","messageId":"739","endLine":24,"endColumn":40},"no-unused-vars","'CounterReactState' is defined but never used.","Identifier","unusedVar","'CounterRedux' is defined but never used.","no-native-reassign",["740"],"no-negated-in-lhs",["741"],"'useParams' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'passengerRename' is assigned a value but never used.","'zipClass' is assigned a value but never used.","'zipId' is assigned a value but never used.","'zipCity' is assigned a value but never used.","'zipState' is assigned a value but never used.","'Pk' is defined but never used.","'Fk' is defined but never used.","'DiamondShape' is defined but never used.","'dname' is assigned a value but never used.","'year' is assigned a value but never used.","'collection' is assigned a value but never used.","'model' is assigned a value but never used.","'type1' is assigned a value but never used.","'type2' is assigned a value but never used.","'type3' is assigned a value but never used.","'type4' is assigned a value but never used.","'type5' is assigned a value but never used.","'type6' is assigned a value but never used.","'type7' is assigned a value but never used.","'tableC' is assigned a value but never used.","'valueNum' is assigned a value but never used.","'valueStr1' is assigned a value but never used.","'valueStr2' is assigned a value but never used.","'randomData' is defined but never used.","'randomFruitSet' is defined but never used.","'randomStringCapitalized' is defined but never used.","'fruits' is defined but never used.","'randomArray' is defined but never used.","'Link' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'randomString' is defined but never used.","'d' is assigned a value but never used.","'e' is assigned a value but never used.","'Correct' is assigned a value but never used.","'Answer' is assigned a value but never used.","'strings' is assigned a value but never used.","'Route' is defined but never used.","'connect' is defined but never used.","'join' is defined but never used.","'randomRenamea' is assigned a value but never used.","'randomRenameb' is assigned a value but never used.","'rowColors' is assigned a value but never used.","'randomRenameA' is assigned a value but never used.","'randomRenameB' is assigned a value but never used.","'randomArrayElement' is defined but never used.","'value1' is assigned a value but never used.","'value2' is assigned a value but never used.","'field3' is assigned a value but never used.","'valueStr' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["740"],["741"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'USERNAME2' is assigned a value but never used.","'USERNAME3' is assigned a value but never used.","'USERNAME4' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-global-assign","no-unsafe-negation"]